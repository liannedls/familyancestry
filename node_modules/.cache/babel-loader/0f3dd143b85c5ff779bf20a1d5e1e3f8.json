{"ast":null,"code":"var prop = function prop(name) {\n  return function (item) {\n    return item[name];\n  };\n};\n\nvar withId = function withId(id) {\n  return function (item) {\n    return item.id === id;\n  };\n};\n\nvar withType = function withType() {\n  for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {\n    types[_key] = arguments[_key];\n  }\n\n  return function (item) {\n    return types.includes(item.type);\n  };\n};\n\nvar withSameIDs = function withSameIDs(target) {\n  return function (unit) {\n    return target.ids.join('') === unit.ids.join('');\n  };\n};\n\nvar flat = function flat(items, item) {\n  return items.concat(item);\n};\n\nvar unique = function unique(item, index, arr) {\n  return arr.indexOf(item) === index;\n};\n\nvar inAscOrder = function inAscOrder(v1, v2) {\n  return v1 - v2;\n};\n\nvar pipe = function pipe() {\n  for (var _len2 = arguments.length, fus = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fus[_key2] = arguments[_key2];\n  }\n\n  return function (init) {\n    return fus.reduce(function (res, fn) {\n      return fn(res);\n    }, init);\n  };\n};\n\nvar relToNode = function relToNode(store) {\n  return function (rel) {\n    return store.getNode(rel.id);\n  };\n};\n\nvar min = function min(arr) {\n  return Math.min.apply(null, arr);\n};\n\nvar max = function max(arr) {\n  return Math.max.apply(null, arr);\n};\n\nvar hasDiffParents = function hasDiffParents(node) {\n  return node.parents.map(prop('type')).filter(unique).length > 1;\n};\n\nexport { prop, withId, withType, withSameIDs, flat, unique, inAscOrder, pipe, relToNode, min, max, hasDiffParents };","map":{"version":3,"sources":["../../src/utils/index.ts"],"names":[],"mappings":"AAIA,IAAM,IAAI,GAAG,SAAP,IAAO,CAAuB,IAAvB;AAAA,SAAmC,UAAC,IAAD;AAAA,WAAmB,IAAI,CAAC,IAAD,CAAvB;AAAA,GAAnC;AAAA,CAAb;;AACA,IAAM,MAAM,GAAG,SAAT,MAAS,CAAuD,EAAvD;AAAA,SAAoE,UAAC,IAAD;AAAA,WAAa,IAAI,CAAC,EAAL,KAAY,EAAzB;AAAA,GAApE;AAAA,CAAf;;AACA,IAAM,QAAQ,GAAG,SAAX,QAAW;AAAA,oCAAiC,KAAjC;AAAiC,IAAA,KAAjC;AAAA;;AAAA,SAAqD,UAAC,IAAD;AAAA,WAAa,KAAK,CAAC,QAAN,CAAe,IAAI,CAAC,IAApB,CAAb;AAAA,GAArD;AAAA,CAAjB;;AACA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,MAAD;AAAA,SAAkB,UAAC,IAAD;AAAA,WAAgB,MAAM,CAAC,GAAP,CAAW,IAAX,CAAgB,EAAhB,MAAwB,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,EAAd,CAAxC;AAAA,GAAlB;AAAA,CAApB;;AACA,IAAM,IAAI,GAAG,SAAP,IAAO,CAAI,KAAJ,EAAgB,IAAhB;AAAA,SAA8B,KAAK,CAAC,MAAN,CAAa,IAAb,CAA9B;AAAA,CAAb;;AACA,IAAM,MAAM,GAAG,SAAT,MAAS,CAAI,IAAJ,EAAa,KAAb,EAA4B,GAA5B;AAAA,SAAkD,GAAG,CAAC,OAAJ,CAAY,IAAZ,MAAsB,KAAxE;AAAA,CAAf;;AACA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,EAAD,EAAa,EAAb;AAAA,SAA4B,EAAE,GAAG,EAAjC;AAAA,CAAnB;;AACA,IAAM,IAAI,GAAG,SAAP,IAAO;AAAA,qCAAI,GAAJ;AAAI,IAAA,GAAJ;AAAA;;AAAA,SAAwB,UAAI,IAAJ;AAAA,WAAgB,GAAG,CAAC,MAAJ,CAAW,UAAC,GAAD,EAAM,EAAN;AAAA,aAAa,EAAE,CAAC,GAAD,CAAf;AAAA,KAAX,EAAiC,IAAjC,CAAhB;AAAA,GAAxB;AAAA,CAAb;;AACA,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,KAAD;AAAA,SAAkB,UAAC,GAAD;AAAA,WAAoB,KAAK,CAAC,OAAN,CAAc,GAAG,CAAC,EAAlB,CAApB;AAAA,GAAlB;AAAA,CAAlB;;AACA,IAAM,GAAG,GAAG,SAAN,GAAM,CAAC,GAAD;AAAA,SAA2B,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,GAArB,CAA3B;AAAA,CAAZ;;AACA,IAAM,GAAG,GAAG,SAAN,GAAM,CAAC,GAAD;AAAA,SAA2B,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,GAArB,CAA3B;AAAA,CAAZ;;AAEA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,IAAD;AAAA,SACrB,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAD,CAArB,EAA+B,MAA/B,CAAsC,MAAtC,EAA8C,MAA9C,GAAuD,CADlC;AAAA,CAAvB;;AAGA,SACE,IADF,EAEE,MAFF,EAGE,QAHF,EAIE,WAJF,EAKE,IALF,EAME,MANF,EAOE,UAPF,EAQE,IARF,EASE,SATF,EAUE,GAVF,EAWE,GAXF,EAYE,cAZF","sourceRoot":"","sourcesContent":["const prop = (name) => (item) => item[name];\nconst withId = (id) => (item) => item.id === id;\nconst withType = (...types) => (item) => types.includes(item.type);\nconst withSameIDs = (target) => (unit) => target.ids.join('') === unit.ids.join('');\nconst flat = (items, item) => items.concat(item);\nconst unique = (item, index, arr) => arr.indexOf(item) === index;\nconst inAscOrder = (v1, v2) => v1 - v2;\nconst pipe = (...fus) => (init) => fus.reduce((res, fn) => fn(res), init);\nconst relToNode = (store) => (rel) => store.getNode(rel.id);\nconst min = (arr) => Math.min.apply(null, arr);\nconst max = (arr) => Math.max.apply(null, arr);\nconst hasDiffParents = (node) => node.parents.map(prop('type')).filter(unique).length > 1;\nexport { prop, withId, withType, withSameIDs, flat, unique, inAscOrder, pipe, relToNode, min, max, hasDiffParents, };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}