{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\lianne\\\\mygit\\\\familyancestry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\lianne\\\\mygit\\\\familyancestry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lianne\\\\mygit\\\\familyancestry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { withId } from './utils';\nvar ERROR_PREFIX = '[relatives-tree::store]:';\n\nvar mapNode = function mapNode(node) {\n  return [node.id, Object.assign({}, node)];\n};\n\nvar Store = /*#__PURE__*/function () {\n  function Store(nodes, rootId) {\n    _classCallCheck(this, Store);\n\n    if (!nodes.find(withId(rootId))) {\n      throw new Error(\"\".concat(ERROR_PREFIX, \" Can't find a root node with ID: \").concat(rootId));\n    }\n\n    this.nextId = 0;\n    this.families = new Map();\n    this.nodes = new Map(nodes.map(mapNode));\n    this.rootNode = this.nodes.get(rootId);\n    this.gender = this.rootNode.gender;\n  }\n\n  _createClass(Store, [{\n    key: \"getNextId\",\n    value: function getNextId() {\n      return ++this.nextId;\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(id) {\n      return this.nodes.get(id);\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes(ids) {\n      return ids.map(this.getNode.bind(this));\n    }\n  }, {\n    key: \"getFamily\",\n    value: function getFamily(id) {\n      return this.families.get(id);\n    }\n  }, {\n    key: \"familiesArray\",\n    get: function get() {\n      return _toConsumableArray(this.families.values());\n    }\n  }]);\n\n  return Store;\n}();\n\nexport default Store;","map":{"version":3,"sources":["../src/store.ts"],"names":[],"mappings":";;;AACA,SAAS,MAAT,QAAuB,SAAvB;AAGA,IAAM,YAAY,GAAG,0BAArB;;AAEA,IAAM,OAAO,GAAG,SAAV,OAAU,CAAC,IAAD;AAAA,SAA8C,CAAC,IAAI,CAAC,EAAN,EAAQ,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,IAAP,CAAR,CAA9C;AAAA,CAAhB;;IAEM,K;AASJ,iBAAY,KAAZ,EAAkC,MAAlC,EAAgD;AAAA;;AAC9C,QAAI,CAAC,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,MAAD,CAAjB,CAAL,EAAiC;AAC/B,YAAM,IAAI,KAAJ,WAAa,YAAb,8CAA6D,MAA7D,EAAN;AACD;;AAED,SAAK,MAAL,GAAc,CAAd;AACA,SAAK,QAAL,GAAgB,IAAI,GAAJ,EAAhB;AACA,SAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ,KAAK,CAAC,GAAN,CAAU,OAAV,CAAR,CAAb;AAEA,SAAK,QAAL,GAAiB,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,CAAjB;AACA,SAAK,MAAL,GAAc,KAAK,QAAL,CAAc,MAA5B;AACD;;;;gCAEQ;AAAa,aAAO,EAAE,KAAK,MAAd;AAAuB;;;4BAErC,E,EAAU;AAAiB,aAAO,KAAK,KAAL,CAAW,GAAX,CAAe,EAAf,CAAP;AAA2C;;;6BACrE,G,EAAa;AAAmB,aAAO,GAAG,CAAC,GAAJ,CAAQ,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAR,CAAP;AAA0C;;;8BACzE,E,EAAU;AAAY,aAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,EAAlB,CAAP;AAAyC;;;wBAExD;AAAe,gCAAW,KAAK,QAAL,CAAc,MAAd,EAAX;AAAoC;;;;;;AAItE,eAAe,KAAf","sourceRoot":"","sourcesContent":["import { withId } from './utils';\nconst ERROR_PREFIX = '[relatives-tree::store]:';\nconst mapNode = (node) => [node.id, Object.assign({}, node)];\nclass Store {\n    constructor(nodes, rootId) {\n        if (!nodes.find(withId(rootId))) {\n            throw new Error(`${ERROR_PREFIX} Can't find a root node with ID: ${rootId}`);\n        }\n        this.nextId = 0;\n        this.families = new Map();\n        this.nodes = new Map(nodes.map(mapNode));\n        this.rootNode = this.nodes.get(rootId);\n        this.gender = this.rootNode.gender;\n    }\n    getNextId() { return ++this.nextId; }\n    getNode(id) { return this.nodes.get(id); }\n    getNodes(ids) { return ids.map(this.getNode.bind(this)); }\n    getFamily(id) { return this.families.get(id); }\n    get familiesArray() { return [...this.families.values()]; }\n}\nexport default Store;\n//# sourceMappingURL=store.js.map"]},"metadata":{},"sourceType":"module"}