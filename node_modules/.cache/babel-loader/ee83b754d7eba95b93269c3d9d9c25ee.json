{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\n(function () {\n  var Base,\n      Monitor,\n      Notifier,\n      __bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Notifier = require('./Notifier');\n  Base = require('./Base');\n\n  module.exports = Monitor = function (_super) {\n    __extends(Monitor, _super);\n\n    Monitor.prototype.states = {\n      ready: null,\n      changed: 'handle_change',\n      cancelled: 'handle_cancel',\n      destroyed: null\n    };\n    Monitor.prototype.destroyed_notifiers = 0;\n\n    function Monitor() {\n      this.user$destroy = __bind(this.user$destroy, this);\n      this.notifier$destroy_notifier = __bind(this.notifier$destroy_notifier, this);\n      this.evaluation$create_notifier = __bind(this.evaluation$create_notifier, this);\n\n      var _this = this;\n\n      this.notifiers = [];\n      this.public_api = {\n        onChange: function (f) {\n          return _this.on('change', f);\n        },\n        onCancel: function (f) {\n          return _this.on('cancel', f);\n        },\n        on: function (e, l) {\n          return _this.on(e, l);\n        },\n        removeListener: function (e, l) {\n          return _this.removeListener(e, l);\n        },\n        once: function (e, l) {\n          return _this.once(e, l);\n        },\n        destroy: this.user$destroy,\n        state: function () {\n          return _this.state;\n        }\n      };\n    }\n\n    Monitor.prototype.handle_cancel = function () {\n      return this.emit('cancel');\n    };\n\n    Monitor.prototype.handle_change = function () {\n      return this.emit('change');\n    };\n\n    Monitor.prototype.evaluation$create_notifier = function () {\n      var n;\n      this.notifiers.push(n = new Notifier(this));\n      return n;\n    };\n\n    Monitor.prototype.notifier$destroy_notifier = function () {\n      if (this.notifiers.length === ++this.destroyed_notifiers) {\n        return this.transition('cancelled');\n      }\n    };\n\n    Monitor.prototype.notifier$fire = function () {\n      var _this = this;\n\n      return this.transition('changed', function () {\n        var x, _i, _len, _ref, _results;\n\n        _ref = _this.notifiers;\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          x = _ref[_i];\n\n          if (x.state === 'ready') {\n            _results.push(x.monitor$cancel());\n          }\n        }\n\n        return _results;\n      });\n    };\n\n    Monitor.prototype.user$destroy = function () {\n      var _this = this;\n\n      return this.transition('destroyed', function () {\n        var x, _i, _len, _ref, _results;\n\n        _ref = _this.notifiers;\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          x = _ref[_i];\n\n          if (x.state === 'ready') {\n            _results.push(x.monitor$cancel());\n          }\n        }\n\n        return _results;\n      });\n    };\n\n    return Monitor;\n  }(Base);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}