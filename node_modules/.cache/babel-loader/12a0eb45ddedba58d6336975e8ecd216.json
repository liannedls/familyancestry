{"ast":null,"code":"import { prop, withType, flat, unique } from '../utils';\nexport default (families => {\n  const connectors = [];\n  families.filter(withType('parent')).forEach(family => {\n    family.pUnits.forEach(pUnit => {\n      const pX = family.left + pUnit.shift + pUnit.size;\n      const pY = family.top + 1;\n      const mY = family.top + 2;\n\n      if (pUnit.size === 2) {\n        connectors.push({\n          points: [pX - 1, pY, pX - 1 + 2, pY]\n        });\n      }\n\n      connectors.push({\n        points: [pX, pY, pX, mY]\n      });\n      const ids = pUnit.nodes.map(prop('children')).reduce(flat).map(prop('id')).filter(unique);\n      family.cUnits.forEach(cUnit => {\n        const cIndex = cUnit.nodes.findIndex(node => ids.indexOf(node.id) !== -1);\n        const cX = family.left + cUnit.shift + cIndex * 2 + 1;\n        connectors.push({\n          points: [cX, mY, cX, mY + 1]\n        });\n\n        if (pX !== cX) {\n          connectors.push({\n            points: [Math.min(pX, cX), mY, Math.max(pX, cX), mY]\n          });\n        }\n      });\n    });\n  });\n  return connectors;\n});","map":null,"metadata":{},"sourceType":"module"}