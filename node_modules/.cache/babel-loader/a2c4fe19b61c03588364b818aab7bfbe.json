{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.crawl = factory();\n})(this, function () {\n  'use strict';\n\n  function Context(flags, cursor) {\n    this.flags = flags;\n    this.cursor = cursor;\n  }\n\n  Context.prototype = {\n    skip: function skip() {\n      this.flags.skip = true;\n    },\n    break: function _break() {\n      this.flags.break = true;\n    },\n    remove: function remove() {\n      this.flags.remove = true;\n    },\n    replace: function replace(node) {\n      this.flags.replace = node;\n    },\n\n    get parent() {\n      return this.cursor.parent;\n    },\n\n    get depth() {\n      return this.cursor.depth;\n    },\n\n    get level() {\n      return this.cursor.depth + 1;\n    },\n\n    get index() {\n      return this.cursor.index;\n    }\n\n  };\n\n  function ContextFactory(flags, cursor) {\n    return new Context(flags, cursor);\n  }\n\n  function Stack(initial) {\n    this.xs = [initial];\n    this.top = 0;\n  }\n\n  Stack.prototype = {\n    push: function push(x) {\n      this.top++;\n\n      if (this.top < this.xs.length) {\n        this.xs[this.top] = x;\n      } else {\n        this.xs.push(x);\n      }\n    },\n    pushArrayReverse: function pushArrayReverse(xs) {\n      for (var i = xs.length - 1; i >= 0; i--) {\n        this.push(xs[i]);\n      }\n    },\n    pop: function pop() {\n      var x = this.peek();\n      this.top--;\n      return x;\n    },\n    peek: function peek() {\n      return this.xs[this.top];\n    },\n    isEmpty: function isEmpty() {\n      return -1 === this.top;\n    }\n  };\n\n  function QueueFactory(initial) {\n    return new Stack(initial);\n  }\n\n  function DfsCursor() {\n    this.depth = 0;\n    this.stack = QueueFactory({\n      node: null,\n      index: -1\n    });\n  }\n\n  DfsCursor.prototype = {\n    moveDown: function moveDown(node) {\n      this.depth++;\n      this.stack.push({\n        node: node,\n        index: 0\n      });\n    },\n    moveUp: function moveUp() {\n      this.depth--;\n      this.stack.pop();\n    },\n    moveNext: function moveNext() {\n      this.stack.peek().index++;\n    },\n\n    get parent() {\n      return this.stack.peek().node;\n    },\n\n    get index() {\n      return this.stack.peek().index;\n    }\n\n  };\n\n  function CursorFactory() {\n    return new DfsCursor();\n  }\n\n  function Flags() {\n    this.break = false;\n    this.skip = false;\n    this.remove = false;\n    this.replace = null;\n  }\n\n  Flags.prototype = {\n    reset: function reset() {\n      this.break = false;\n      this.skip = false;\n      this.remove = false;\n      this.replace = null;\n    }\n  };\n\n  function FlagsFactory() {\n    return new Flags();\n  }\n\n  function isNotEmpty(xs) {\n    return xs && 0 !== xs.length;\n  }\n\n  function dfsPre(root, iteratee, getChildren) {\n    var flags = FlagsFactory();\n    var cursor = CursorFactory();\n    var context = ContextFactory(flags, cursor);\n    var stack = QueueFactory(root);\n    var dummy = Object.assign({}, root);\n\n    while (!stack.isEmpty()) {\n      var node = stack.pop();\n\n      if (node === dummy) {\n        cursor.moveUp();\n        continue;\n      }\n\n      flags.reset();\n      iteratee(node, context);\n      if (flags.break) break;\n      if (flags.remove) continue;\n      cursor.moveNext();\n\n      if (!flags.skip) {\n        if (flags.replace) {\n          node = flags.replace;\n        }\n\n        var children = getChildren(node);\n\n        if (isNotEmpty(children)) {\n          stack.push(dummy);\n          stack.pushArrayReverse(children);\n          cursor.moveDown(node);\n        }\n      }\n    }\n  }\n\n  function dfsPost(root, iteratee, getChildren) {\n    var flags = FlagsFactory();\n    var cursor = CursorFactory();\n    var context = ContextFactory(flags, cursor);\n    var stack = QueueFactory(root);\n    var ancestors = QueueFactory(null);\n\n    while (!stack.isEmpty()) {\n      var node = stack.peek();\n      var parent = ancestors.peek();\n      var children = getChildren(node);\n      flags.reset();\n\n      if (node === parent || !isNotEmpty(children)) {\n        if (node === parent) {\n          ancestors.pop();\n          cursor.moveUp();\n        }\n\n        stack.pop();\n        iteratee(node, context);\n        if (flags.break) break;\n        if (flags.remove) continue;\n        cursor.moveNext();\n      } else {\n        ancestors.push(node);\n        cursor.moveDown(node);\n        stack.pushArrayReverse(children);\n      }\n    }\n  }\n\n  var THRESHOLD = 32768;\n\n  function Queue(initial) {\n    this.xs = [initial];\n    this.top = 0;\n    this.maxLength = 0;\n  }\n\n  Queue.prototype = {\n    enqueue: function enqueue(x) {\n      this.xs.push(x);\n    },\n    enqueueMultiple: function enqueueMultiple(xs) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        this.enqueue(xs[i]);\n      }\n    },\n    dequeue: function dequeue() {\n      var x = this.peek();\n      this.top++;\n\n      if (this.top === THRESHOLD) {\n        this.xs = this.xs.slice(this.top);\n        this.top = 0;\n      }\n\n      return x;\n    },\n    peek: function peek() {\n      return this.xs[this.top];\n    },\n    isEmpty: function isEmpty() {\n      return this.top === this.xs.length;\n    }\n  };\n\n  function QueueFactory$1(initial) {\n    return new Queue(initial);\n  }\n\n  function BfsCursor() {\n    this.depth = 0;\n    this.index = -1;\n    this.queue = QueueFactory$1({\n      node: null,\n      arity: 1\n    });\n    this.levelNodes = 1;\n    this.nextLevelNodes = 0;\n  }\n\n  BfsCursor.prototype = {\n    store: function store(node, arity) {\n      this.queue.enqueue({\n        node: node,\n        arity: arity\n      });\n      this.nextLevelNodes += arity;\n    },\n    moveNext: function moveNext() {\n      this.index++;\n    },\n    moveForward: function moveForward() {\n      this.queue.peek().arity--;\n      this.levelNodes--;\n\n      if (0 === this.queue.peek().arity) {\n        this.index = 0;\n        this.queue.dequeue();\n      }\n\n      if (0 === this.levelNodes) {\n        this.depth++;\n        this.levelNodes = this.nextLevelNodes;\n        this.nextLevelNodes = 0;\n      }\n    },\n\n    get parent() {\n      return this.queue.peek().node;\n    }\n\n  };\n\n  function CursorFactory$1() {\n    return new BfsCursor();\n  }\n\n  function bfs(root, iteratee, getChildren) {\n    var flags = FlagsFactory();\n    var cursor = CursorFactory$1();\n    var context = ContextFactory(flags, cursor);\n    var queue = QueueFactory$1(root);\n\n    while (!queue.isEmpty()) {\n      var node = queue.dequeue();\n      flags.reset();\n      iteratee(node, context);\n      if (flags.break) break;\n\n      if (!flags.remove) {\n        cursor.moveNext();\n\n        if (flags.replace) {\n          node = flags.replace;\n        }\n\n        if (!flags.skip) {\n          var children = getChildren(node);\n\n          if (isNotEmpty(children)) {\n            queue.enqueueMultiple(children);\n            cursor.store(node, children.length);\n          }\n        }\n      }\n\n      cursor.moveForward();\n    }\n  }\n\n  var defaultGetChildren = function defaultGetChildren(node) {\n    return node.children;\n  };\n\n  function crawl(root, iteratee, options) {\n    if (null == root) return;\n    options = options || {};\n    var order = options.order || 'pre';\n    var getChildren = options.getChildren || defaultGetChildren;\n\n    if ('pre' === order) {\n      dfsPre(root, iteratee, getChildren);\n    } else if ('post' === order) {\n      dfsPost(root, iteratee, getChildren);\n    } else if ('bfs' === order) {\n      bfs(root, iteratee, getChildren);\n    }\n  }\n\n  return crawl;\n});","map":{"version":3,"sources":["C:/Users/lianne/mygit/family_acestry_folder/familyancestry-wBloodlines/node_modules/tree-crawl/dist/tree-crawl.js"],"names":["global","factory","exports","module","define","amd","crawl","Context","flags","cursor","prototype","skip","break","_break","remove","replace","node","parent","depth","level","index","ContextFactory","Stack","initial","xs","top","push","x","length","pushArrayReverse","i","pop","peek","isEmpty","QueueFactory","DfsCursor","stack","moveDown","moveUp","moveNext","CursorFactory","Flags","reset","FlagsFactory","isNotEmpty","dfsPre","root","iteratee","getChildren","context","dummy","Object","assign","children","dfsPost","ancestors","THRESHOLD","Queue","maxLength","enqueue","enqueueMultiple","len","dequeue","slice","QueueFactory$1","BfsCursor","queue","arity","levelNodes","nextLevelNodes","store","moveForward","CursorFactory$1","bfs","defaultGetChildren","options","order"],"mappings":"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","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.crawl = factory());\n}(this, (function () { 'use strict';\n\nfunction Context(flags, cursor) {\n  this.flags = flags;\n  this.cursor = cursor;\n}\nContext.prototype = {\n  skip: function skip() {\n    this.flags.skip = true;\n  },\n  break: function _break() {\n    this.flags.break = true;\n  },\n  remove: function remove() {\n    this.flags.remove = true;\n  },\n  replace: function replace(node) {\n    this.flags.replace = node;\n  },\n  get parent() {\n    return this.cursor.parent;\n  },\n  get depth() {\n    return this.cursor.depth;\n  },\n  get level() {\n    return this.cursor.depth + 1;\n  },\n  get index() {\n    return this.cursor.index;\n  }\n};\nfunction ContextFactory(flags, cursor) {\n  return new Context(flags, cursor);\n}\n\nfunction Stack(initial) {\n  this.xs = [initial];\n  this.top = 0;\n}\nStack.prototype = {\n  push: function push(x) {\n    this.top++;\n    if (this.top < this.xs.length) {\n      this.xs[this.top] = x;\n    } else {\n      this.xs.push(x);\n    }\n  },\n  pushArrayReverse: function pushArrayReverse(xs) {\n    for (var i = xs.length - 1; i >= 0; i--) {\n      this.push(xs[i]);\n    }\n  },\n  pop: function pop() {\n    var x = this.peek();\n    this.top--;\n    return x;\n  },\n  peek: function peek() {\n    return this.xs[this.top];\n  },\n  isEmpty: function isEmpty() {\n    return -1 === this.top;\n  }\n};\nfunction QueueFactory(initial) {\n  return new Stack(initial);\n}\n\nfunction DfsCursor() {\n  this.depth = 0;\n  this.stack = QueueFactory({ node: null, index: -1 });\n}\nDfsCursor.prototype = {\n  moveDown: function moveDown(node) {\n    this.depth++;\n    this.stack.push({ node: node, index: 0 });\n  },\n  moveUp: function moveUp() {\n    this.depth--;\n    this.stack.pop();\n  },\n  moveNext: function moveNext() {\n    this.stack.peek().index++;\n  },\n  get parent() {\n    return this.stack.peek().node;\n  },\n  get index() {\n    return this.stack.peek().index;\n  }\n};\nfunction CursorFactory() {\n  return new DfsCursor();\n}\n\nfunction Flags() {\n  this.break = false;\n  this.skip = false;\n  this.remove = false;\n  this.replace = null;\n}\nFlags.prototype = {\n  reset: function reset() {\n    this.break = false;\n    this.skip = false;\n    this.remove = false;\n    this.replace = null;\n  }\n};\nfunction FlagsFactory() {\n  return new Flags();\n}\n\nfunction isNotEmpty(xs) {\n  return xs && 0 !== xs.length;\n}\n\nfunction dfsPre(root, iteratee, getChildren) {\n  var flags = FlagsFactory();\n  var cursor = CursorFactory();\n  var context = ContextFactory(flags, cursor);\n  var stack = QueueFactory(root);\n  var dummy = Object.assign({}, root);\n  while (!stack.isEmpty()) {\n    var node = stack.pop();\n    if (node === dummy) {\n      cursor.moveUp();\n      continue;\n    }\n    flags.reset();\n    iteratee(node, context);\n    if (flags.break) break;\n    if (flags.remove) continue;\n    cursor.moveNext();\n    if (!flags.skip) {\n      if (flags.replace) {\n        node = flags.replace;\n      }\n      var children = getChildren(node);\n      if (isNotEmpty(children)) {\n        stack.push(dummy);\n        stack.pushArrayReverse(children);\n        cursor.moveDown(node);\n      }\n    }\n  }\n}\n\nfunction dfsPost(root, iteratee, getChildren) {\n  var flags = FlagsFactory();\n  var cursor = CursorFactory();\n  var context = ContextFactory(flags, cursor);\n  var stack = QueueFactory(root);\n  var ancestors = QueueFactory(null);\n  while (!stack.isEmpty()) {\n    var node = stack.peek();\n    var parent = ancestors.peek();\n    var children = getChildren(node);\n    flags.reset();\n    if (node === parent || !isNotEmpty(children)) {\n      if (node === parent) {\n        ancestors.pop();\n        cursor.moveUp();\n      }\n      stack.pop();\n      iteratee(node, context);\n      if (flags.break) break;\n      if (flags.remove) continue;\n      cursor.moveNext();\n    } else {\n      ancestors.push(node);\n      cursor.moveDown(node);\n      stack.pushArrayReverse(children);\n    }\n  }\n}\n\nvar THRESHOLD = 32768;\nfunction Queue(initial) {\n  this.xs = [initial];\n  this.top = 0;\n  this.maxLength = 0;\n}\nQueue.prototype = {\n  enqueue: function enqueue(x) {\n    this.xs.push(x);\n  },\n  enqueueMultiple: function enqueueMultiple(xs) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      this.enqueue(xs[i]);\n    }\n  },\n  dequeue: function dequeue() {\n    var x = this.peek();\n    this.top++;\n    if (this.top === THRESHOLD) {\n      this.xs = this.xs.slice(this.top);\n      this.top = 0;\n    }\n    return x;\n  },\n  peek: function peek() {\n    return this.xs[this.top];\n  },\n  isEmpty: function isEmpty() {\n    return this.top === this.xs.length;\n  }\n};\nfunction QueueFactory$1(initial) {\n  return new Queue(initial);\n}\n\nfunction BfsCursor() {\n  this.depth = 0;\n  this.index = -1;\n  this.queue = QueueFactory$1({ node: null, arity: 1 });\n  this.levelNodes = 1;\n  this.nextLevelNodes = 0;\n}\nBfsCursor.prototype = {\n  store: function store(node, arity) {\n    this.queue.enqueue({ node: node, arity: arity });\n    this.nextLevelNodes += arity;\n  },\n  moveNext: function moveNext() {\n    this.index++;\n  },\n  moveForward: function moveForward() {\n    this.queue.peek().arity--;\n    this.levelNodes--;\n    if (0 === this.queue.peek().arity) {\n      this.index = 0;\n      this.queue.dequeue();\n    }\n    if (0 === this.levelNodes) {\n      this.depth++;\n      this.levelNodes = this.nextLevelNodes;\n      this.nextLevelNodes = 0;\n    }\n  },\n  get parent() {\n    return this.queue.peek().node;\n  }\n};\nfunction CursorFactory$1() {\n  return new BfsCursor();\n}\n\nfunction bfs(root, iteratee, getChildren) {\n  var flags = FlagsFactory();\n  var cursor = CursorFactory$1();\n  var context = ContextFactory(flags, cursor);\n  var queue = QueueFactory$1(root);\n  while (!queue.isEmpty()) {\n    var node = queue.dequeue();\n    flags.reset();\n    iteratee(node, context);\n    if (flags.break) break;\n    if (!flags.remove) {\n      cursor.moveNext();\n      if (flags.replace) {\n        node = flags.replace;\n      }\n      if (!flags.skip) {\n        var children = getChildren(node);\n        if (isNotEmpty(children)) {\n          queue.enqueueMultiple(children);\n          cursor.store(node, children.length);\n        }\n      }\n    }\n    cursor.moveForward();\n  }\n}\n\nvar defaultGetChildren = function defaultGetChildren(node) {\n  return node.children;\n};\nfunction crawl(root, iteratee, options) {\n  if (null == root) return;\n  options = options || {};\n  var order = options.order || 'pre';\n  var getChildren = options.getChildren || defaultGetChildren;\n  if ('pre' === order) {\n    dfsPre(root, iteratee, getChildren);\n  } else if ('post' === order) {\n    dfsPost(root, iteratee, getChildren);\n  } else if ('bfs' === order) {\n    bfs(root, iteratee, getChildren);\n  }\n}\n\nreturn crawl;\n\n})));\n"]},"metadata":{},"sourceType":"script"}