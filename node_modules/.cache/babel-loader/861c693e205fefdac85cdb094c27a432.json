{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\n(function () {\n  var Base,\n      Notifier,\n      __bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  Base = require('./Base');\n  /*\n  The Notifier is the main class used when creating reactive functions\n  */\n\n  module.exports = Notifier = function (_super) {\n    __extends(Notifier, _super);\n\n    Notifier.prototype.states = {\n      ready: null,\n      cancelled: 'handle_cancel',\n      fired: null,\n      destroyed: null\n    };\n\n    function Notifier(monitor) {\n      var f,\n          _this = this;\n\n      this.monitor = monitor;\n      this.user$destroy = __bind(this.user$destroy, this);\n      this.user$fire = __bind(this.user$fire, this);\n\n      this.public_api = f = function () {\n        return _this.user$fire();\n      };\n\n      f.onCancel = function (l) {\n        return _this.on('cancel', l);\n      };\n\n      f.on = function (e, l) {\n        return _this.on(e, l);\n      };\n\n      f.off = function (e, l) {\n        return _this.off(e, l);\n      };\n\n      f.once = function (e, l) {\n        return _this.once(e, l);\n      };\n\n      f.state = function () {\n        return _this.state;\n      };\n\n      f.destroy = this.user$destroy;\n      f.fire = this.user$fire;\n    }\n\n    Notifier.prototype.handle_cancel = function () {\n      return this.emit('cancel');\n    };\n\n    Notifier.prototype.user$fire = function () {\n      var _this = this;\n\n      return this.transition('fired', function () {\n        return _this.monitor.notifier$fire();\n      });\n    };\n\n    Notifier.prototype.user$destroy = function () {\n      var _this = this;\n\n      return this.transition('destroyed', function () {\n        return _this.monitor.notifier$destroy_notifier();\n      });\n    };\n\n    Notifier.prototype.monitor$cancel = function () {\n      return this.transition('cancelled');\n    };\n\n    return Notifier;\n  }(Base);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}