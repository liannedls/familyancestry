{"ast":null,"code":"import arrangeMiddle from '../middle/arrange';\nimport { withId, withType, withSameIDs } from '../utils';\nexport default (function (store) {\n  return function (family) {\n    if (family.pID === null) return;\n    var right = 0;\n\n    var _loop = function _loop() {\n      var fUnit = family.pUnits[0];\n      var shift = fUnit.shift;\n      right = Math.max(right, family.right);\n      var pFamily = store.getFamily(family.pID);\n      var cUnit = pFamily.cUnits.find(withSameIDs(fUnit));\n      var uIndex = pFamily.cUnits.findIndex(function (unit) {\n        return unit.nodes[0].id === fUnit.nodes[0].id;\n      });\n\n      if (uIndex === 0) {\n        var left = family.left + shift - cUnit.shift;\n        pFamily.left = Math.max(pFamily.left, left);\n      } else {\n        cUnit.shift = family.left + fUnit.shift - pFamily.left;\n      }\n\n      var next = pFamily.cUnits[uIndex + 1];\n\n      if (next) {\n        var diff = right - (pFamily.left + next.shift);\n\n        for (var i = uIndex + 1; i < pFamily.cUnits.length; i++) {\n          pFamily.cUnits[i].shift += diff;\n        }\n      }\n\n      var ppUnit = pFamily.pUnits[0];\n\n      if (ppUnit) {\n        var size = pFamily.width;\n        ppUnit.shift = Math.floor((size - 2 * ppUnit.size) / 2);\n      }\n\n      if (pFamily.pID === null) {\n        var rootFamily = store.familiesArray.filter(withType('root'));\n        var start = rootFamily.findIndex(withId(pFamily.id));\n        arrangeMiddle(rootFamily, start + 1, family.right);\n        return \"break\";\n      }\n\n      family = pFamily;\n    };\n\n    while (family) {\n      var _ret = _loop();\n\n      if (_ret === \"break\") break;\n    }\n  };\n});","map":{"version":3,"sources":["../../src/children/arrange.ts"],"names":[],"mappings":"AAGA,OAAO,aAAP,MAA0B,mBAA1B;AACA,SAAS,MAAT,EAAiB,QAAjB,EAA2B,WAA3B,QAA8C,UAA9C;AAEA,gBAAe,UAAC,KAAD,EAAiB;AAC9B,SAAO,UAAU,MAAV,EAAwB;AAC7B,QAAI,MAAM,CAAC,GAAP,KAAe,IAAnB,EAAyB;AACzB,QAAI,KAAK,GAAG,CAAZ;;AAF6B;AAK3B,UAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,CAAd,CAAd;AAEA,UAAM,KAAK,GAAG,KAAK,CAAC,KAApB;AACA,MAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,MAAM,CAAC,KAAvB,CAAR;AAEA,UAAM,OAAO,GAAG,KAAK,CAAC,SAAN,CAAgB,MAAM,CAAC,GAAvB,CAAhB;AAEA,UAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,IAAf,CAAoB,WAAW,CAAC,KAAD,CAA/B,CAAd;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,MAAR,CAAe,SAAf,CAAyB,UAAA,IAAI;AAAA,eAC1C,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,EAAd,KAAqB,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,EADM;AAAA,OAA7B,CAAf;;AAIA,UAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAM,IAAI,GAAG,MAAM,CAAC,IAAP,GAAc,KAAd,GAAsB,KAAK,CAAC,KAAzC;AACA,QAAA,OAAO,CAAC,IAAR,GAAe,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,IAAvB,CAAf;AACD,OAHD,MAGO;AACL,QAAA,KAAK,CAAC,KAAN,GAAc,MAAM,CAAC,IAAP,GAAc,KAAK,CAAC,KAApB,GAA4B,OAAO,CAAC,IAAlD;AACD;;AAED,UAAM,IAAI,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,GAAG,CAAxB,CAAb;;AAEA,UAAI,IAAJ,EAAU;AACR,YAAM,IAAI,GAAG,KAAK,IAAI,OAAO,CAAC,IAAR,GAAe,IAAI,CAAC,KAAxB,CAAlB;;AAEA,aAAK,IAAI,CAAC,GAAG,MAAM,GAAG,CAAtB,EAAyB,CAAC,GAAG,OAAO,CAAC,MAAR,CAAe,MAA5C,EAAoD,CAAC,EAArD,EAAyD;AACvD,UAAA,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,KAAlB,IAA2B,IAA3B;AACD;AACF;;AAED,UAAM,MAAM,GAAG,OAAO,CAAC,MAAR,CAAe,CAAf,CAAf;;AAEA,UAAI,MAAJ,EAAY;AACV,YAAM,IAAI,GAAG,OAAO,CAAC,KAArB;AACA,QAAA,MAAM,CAAC,KAAP,GAAe,IAAI,CAAC,KAAL,CAAW,CAAC,IAAI,GAAI,IAAI,MAAM,CAAC,IAApB,IAA6B,CAAxC,CAAf;AACD;;AAED,UAAI,OAAO,CAAC,GAAR,KAAgB,IAApB,EAA0B;AACxB,YAAM,UAAU,GAAG,KAAK,CAAC,aAAN,CAAoB,MAApB,CAA2B,QAAQ,CAAC,MAAD,CAAnC,CAAnB;AACA,YAAM,KAAK,GAAG,UAAU,CAAC,SAAX,CAAqB,MAAM,CAAC,OAAO,CAAC,EAAT,CAA3B,CAAd;AACA,QAAA,aAAa,CAAC,UAAD,EAAa,KAAK,GAAG,CAArB,EAAwB,MAAM,CAAC,KAA/B,CAAb;AACA;AACD;;AAED,MAAA,MAAM,GAAG,OAAT;AAhD2B;;AAI7B,WAAO,MAAP,EAAe;AAAA;;AAAA,4BAyCX;AAIH;AACF,GAlDD;AAmDD,CApDD","sourceRoot":"","sourcesContent":["import arrangeMiddle from '../middle/arrange';\nimport { withId, withType, withSameIDs } from '../utils';\nexport default (store) => {\n    return function (family) {\n        if (family.pID === null)\n            return;\n        let right = 0;\n        while (family) {\n            const fUnit = family.pUnits[0];\n            const shift = fUnit.shift;\n            right = Math.max(right, family.right);\n            const pFamily = store.getFamily(family.pID);\n            const cUnit = pFamily.cUnits.find(withSameIDs(fUnit));\n            const uIndex = pFamily.cUnits.findIndex(unit => (unit.nodes[0].id === fUnit.nodes[0].id));\n            if (uIndex === 0) {\n                const left = family.left + shift - cUnit.shift;\n                pFamily.left = Math.max(pFamily.left, left);\n            }\n            else {\n                cUnit.shift = family.left + fUnit.shift - pFamily.left;\n            }\n            const next = pFamily.cUnits[uIndex + 1];\n            if (next) {\n                const diff = right - (pFamily.left + next.shift);\n                for (let i = uIndex + 1; i < pFamily.cUnits.length; i++) {\n                    pFamily.cUnits[i].shift += diff;\n                }\n            }\n            const ppUnit = pFamily.pUnits[0];\n            if (ppUnit) {\n                const size = pFamily.width;\n                ppUnit.shift = Math.floor((size - (2 * ppUnit.size)) / 2);\n            }\n            if (pFamily.pID === null) {\n                const rootFamily = store.familiesArray.filter(withType('root'));\n                const start = rootFamily.findIndex(withId(pFamily.id));\n                arrangeMiddle(rootFamily, start + 1, family.right);\n                break;\n            }\n            family = pFamily;\n        }\n    };\n};\n//# sourceMappingURL=arrange.js.map"]},"metadata":{},"sourceType":"module"}