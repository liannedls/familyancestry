{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lianne\\\\mygit\\\\familyancestry\\\\src\\\\frontend\\\\FamilyNode\\\\FamilyNode.tsx\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from './FamilyNode.module.css';\nimport Modal from 'react-modal';\n\nfunction Iflink(link) {\n  if (link) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: link,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, \"See more\"));\n  }\n}\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    padding: '10px'\n  }\n}; // Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n\nModal.setAppElement('*');\nexport default React.memo(function FamilyNode({\n  node,\n  isRoot,\n  onSubClick,\n  style,\n  namePerson\n}) {\n  var subtitle;\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: openModal,\n    className: classNames(styles.inner, styles[node.gender], isRoot && styles.isRoot),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: styles.person,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, namePerson)), node.hasSubTree && /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(styles.sub, styles[node.gender]),\n    onClick: () => onSubClick(node.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: closeModal,\n    style: customStyles,\n    contentLabel: \"Example Modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.popupTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    ref: _subtitle => subtitle = _subtitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"close\"), node.name, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.popupContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"DOB: \", node.dob, \"DOD: \", node.dod, Iflink(node.link)), /*#__PURE__*/React.createElement(\"img\", {\n    src: node.src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }))));\n});","map":{"version":3,"sources":["C:/Users/lianne/mygit/familyancestry/src/frontend/FamilyNode/FamilyNode.tsx"],"names":["React","classNames","styles","Modal","Iflink","link","customStyles","content","top","left","right","bottom","marginRight","transform","padding","setAppElement","memo","FamilyNode","node","isRoot","onSubClick","style","namePerson","subtitle","modalIsOpen","setIsOpen","useState","openModal","closeModal","root","inner","gender","person","hasSubTree","sub","id","popupTop","_subtitle","name","popupContent","dob","dod","src"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport classNames from 'classnames';\r\nimport { IFamilyExtNode } from 'relatives-tree';\r\nimport styles from './FamilyNode.module.css';\r\nimport Modal from 'react-modal';\r\n\r\ninterface Props {\r\n  node: IFamilyExtNode;\r\n  isRoot: boolean;\r\n  onSubClick: (id: string) => void;\r\n  style?: React.CSSProperties;\r\n  namePerson: string;\r\n}\r\n\r\nfunction Iflink(link){\r\n  if (link){\r\n      return(\r\n        <div>\r\n\r\n        <a href={link}>See more</a>\r\n        </div>\r\n      )\r\n  }\r\n}\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)',\r\n    padding               : '10px'\r\n  }\r\n};\r\n\r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\nModal.setAppElement('*')\r\n\r\nexport default React.memo<Props>(\r\n\r\n  function FamilyNode({ node, isRoot, onSubClick, style, namePerson }) {\r\n    var subtitle;\r\n    const [modalIsOpen,setIsOpen] = React.useState(false);\r\n    function openModal() {\r\n      setIsOpen(true);\r\n    }\r\n\r\n    function closeModal(){\r\n      setIsOpen(false);\r\n    }\r\n    return (\r\n      <div className={styles.root} style={style}>\r\n            <button onClick={openModal}\r\n            className={classNames(\r\n              styles.inner,\r\n              styles[node.gender],\r\n              isRoot && styles.isRoot,\r\n            )}\r\n          >\r\n          <p className={styles.person}>\r\n          {namePerson}\r\n          </p>\r\n</button>\r\n\r\n\r\n        {node.hasSubTree && (\r\n          <div\r\n            className={classNames(styles.sub, styles[node.gender])}\r\n            onClick={() => onSubClick(node.id)}\r\n          />\r\n        )}\r\n\r\n\r\n\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n  <div className = {styles.popupTop}>\r\n          <h2 ref={_subtitle => (subtitle = _subtitle)}>Hello</h2>\r\n          <button onClick={closeModal}>close</button>\r\n            {node.name}\r\n              <div className = {styles.popupContent}>\r\n              DOB: {node.dob}\r\n              DOD: {node.dod}\r\n              {Iflink(node.link)}\r\n          </div>\r\n\r\n            <img src={node.src} />\r\n            </div>\r\n        </Modal>\r\n          </div>\r\n    );\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}