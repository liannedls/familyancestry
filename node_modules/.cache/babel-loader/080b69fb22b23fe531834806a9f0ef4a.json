{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lianne\\\\mygit\\\\family_acestry_folder\\\\familyancestry-wBloodlines\\\\src\\\\frontend\\\\Graph.js\";\n// Modules\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport ForceGraph3D from 'react-force-graph-3d';\nimport * as THREE from 'three';\nimport SpriteText from 'three-spritetext';\nimport { forceCollide } from 'd3-force-3d';\n\nconst Graph = ({\n  d3Data,\n  highlightedFamily,\n  setHighlightedFamily\n}) => {\n  const [highlights, setHighlights] = useState({\n    node: null,\n    family: [],\n    links: []\n  });\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const fgRef = useRef(); // Manage force\n\n  useEffect(() => {\n    fgRef.current.d3Force('collide', forceCollide(55));\n  }); // Resize window\n\n  window.onresize = function (event) {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  }; // Camera position\n\n\n  const positionCamera = useCallback(node => {\n    // Aim at node from outside it\n    const distance = 350;\n    const distRatio = 2 + distance / Math.hypot(node.x, node.y, node.z);\n    fgRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    1200 // ms transition duration\n    );\n  }, [fgRef]); // const cameraDistance = () => {\n  //   const distanceRatio = (d3Data.nodes.length/2) * 15;\n  //   if (distanceRatio < 450) {\n  //     return 450;\n  //   } else if (distanceRatio > 900) {\n  //     return 2000;\n  //   } else {\n  //     return distanceRatio;\n  //   }\n  // }\n  // Node design\n\n  const setNodeThreeObject = node => {\n    // Use a sphere as a drag handle\n    const obj = new THREE.Mesh(new THREE.SphereGeometry(10), new THREE.MeshBasicMaterial({\n      depthWrite: false,\n      transparent: true,\n      opacity: 0\n    })); // Add text sprite as child\n\n    let name;\n\n    if (node.firstName === '?') {\n      name = node.name;\n    } else {\n      name = node.surname.toUpperCase() + ', ' + node.firstName;\n    }\n\n    let sprite = new SpriteText(name); // Sprite defaults\n\n    const coloredSprite = () => {\n      sprite.color = node.color;\n      sprite.backgroundColor = '#222'; // sprite.padding = 1;\n\n      sprite.borderColor = '#444'; // sprite.borderWidth = 1;\n    };\n\n    const greyedSprite = () => {\n      sprite.color = '#222';\n      sprite.backgroundColor = false;\n      sprite.borderWidth = 0;\n    }; // NODE.COLOR\n    // No highlighted node\n\n\n    if (highlights.node === null) {\n      if (highlightedFamily) {\n        if (highlightedFamily === node.surname) {\n          coloredSprite();\n        } else {\n          greyedSprite();\n        }\n      } else {\n        coloredSprite();\n      }\n    } else {\n      if (highlights.family.indexOf(node.id) !== -1) {\n        coloredSprite();\n      } else {\n        greyedSprite();\n      }\n    }\n\n    sprite.fontFace = \"Montserrat\";\n    sprite.fontWeight = 600;\n    sprite.textHeight = 10;\n    obj.add(sprite);\n    return obj;\n  }; // Node label\n\n\n  const setNodeLabel = node => {\n    // Label setup\n    let label = `<div class=\"node-label\">`; // Gender\n\n    const labelGender = node.gender === 'M' ? `♂` : `♀`; // Name\n\n    if (node.title) {\n      label += `<h4 class=\"node-title\"><span style=\"color:${node.color}\">${node.name} (${node.title})</span> ${labelGender}</h4>`;\n    } else {\n      label += `<h4><span style=\"color:${node.color}\">${node.name}</span> ${labelGender}</h4>`;\n    } // Lifespan\n\n\n    label += `<p><b>${node.yob} - ${node.yod}</b></p>`; // Birthplace\n\n    if (node.pob !== '') {\n      label += `<p><b>From:</b> ${node.pob}</p>`;\n    } // Deathplace\n    // if (node.pod != '') {\n    //   label += `<p><b>Died:</b> ${node.pod}</p>`\n    // }\n    // Bio\n\n\n    if (node.bio) {\n      label += `<p>${node.bio}</p>`;\n    }\n\n    return label += '</div>';\n  }; // Handle node click\n\n\n  const showFamily = (d3Data, node, highlights) => {\n    // Find family member of clicked node\n    const findFamilies = (links, node, highlights) => {\n      if (links.source.id === node.id || links.target.id === node.id) {\n        let updatedHighlightFamily = highlights.family;\n        let updatedHighlightLinks = highlights.links;\n        updatedHighlightFamily.push(links.target.id, links.source.id);\n        updatedHighlightLinks.push(links.index);\n        setHighlights({\n          node: node,\n          family: updatedHighlightFamily,\n          links: updatedHighlightLinks\n        });\n      }\n    }; // None highlighted\n\n\n    if (highlights.node === null) {\n      d3Data.links.filter(links => findFamilies(links, node, highlights)); // Different node highlighted\n    } else if (highlights.node !== node) {\n      let tempHighlights = {\n        node: null,\n        family: [],\n        links: []\n      };\n      d3Data.links.filter(links => findFamilies(links, node, tempHighlights)); // Reset current node\n    } else {\n      setHighlights({\n        node: null,\n        family: [],\n        links: []\n      });\n    }\n  }; // Right click\n\n\n  const handleRightClick = (d3Data, node, highlights) => {\n    showFamily(d3Data, node, highlights);\n    positionCamera(node);\n  }; // Link label\n\n\n  const setLinkLabel = link => {\n    // No state change\n    switch (link.type) {\n      case 'DIV':\n        return '<div class=\"link-label\"><p>Divorced</p></div>';\n        break;\n\n      case 'MARR':\n        return '<div class=\"link-label\"><p>Married</p></div>';\n        break;\n\n      case 'birth':\n        return '<div class=\"link-label\"><p>Birth</p></div>';\n        break;\n\n      case 'Natural':\n        return '<div class=\"link-label\"><p>Birth</p></div>';\n        break;\n\n      case 'Step':\n        return '<div class=\"link-label\"><p>Step</p></div>';\n        break;\n\n      case 'Adopted':\n        return '<div class=\"link-label\"><p>Adopted</p></div>';\n        break;\n    }\n  }; // Link color\n\n\n  const setLinkColor = link => {\n    return highlights.links.length < 1 ? highlightedFamily ? 'rgba(255, 153, 153, 0.2)' : // Highlighed family exists, mute all links\n    link.sourceType != 'CHIL' && link.targetType != 'CHIL' ? 'rgba(255, 215, 0, 0.6)' : // Romantic link\n    'rgba(255, 153, 153, 0.2)' : // Normal link\n    highlights.links.indexOf(link.index) !== -1 ? link.sourceType != 'CHIL' && link.targetType != 'CHIL' ? 'rgba(255, 215, 0, 0.6)' : // Romantic link\n    'rgba(255, 153, 153, 0.2)' : // Normal link\n    'rgba(255, 153, 153, 0.2)'; // Normal link\n  }; // Link width\n\n\n  const setLinkWidth = link => {\n    if (highlights.links.indexOf(link.index) !== -1) {\n      return 1.7;\n    } else {\n      return 1;\n    }\n  }; // Link particles\n\n\n  const setLinkParticleWidth = link => {\n    if (highlights.links.indexOf(link.index) !== -1) {\n      return 2;\n    } else {\n      return 0.1;\n    }\n  }; // Remove highlights\n\n\n  const clearHighlights = () => {\n    setHighlights({\n      node: null,\n      family: [],\n      links: []\n    });\n    setHighlightedFamily();\n  }; // Add fog\n\n\n  useEffect(() => {\n    console.log(d3Data.nodes.length);\n    let fogNear = 1000;\n    let fogFar = 8000;\n\n    if (d3Data.nodes.length < 120) {\n      console.log('two');\n      fogNear = 600;\n      fogFar = 4000;\n    }\n\n    ;\n    const fogColor = new THREE.Color(0x111111);\n    var myFog = new THREE.Fog(fogColor, fogNear, fogFar);\n    var myFogg = new THREE.FogExp2(fogColor, 0.0025);\n    fgRef.current.scene().fog = myFog;\n  }, []); // Add timeline\n\n  useEffect(() => {\n    // Get list of fixed Y\n    let yRange = d3Data.nodes.map(node => Number(node.fy)); // Filter our NaN\n\n    yRange = yRange.filter(node => !isNaN(node) && node); // TIMELINE\n\n    const highestY = Math.max.apply(Math, yRange);\n    const lowestY = Math.min.apply(Math, yRange); //create a blue LineBasicMaterial\n\n    var material = new THREE.LineBasicMaterial({\n      color: 0x333333,\n      linewidth: 2\n    });\n    var points = [];\n    points.push(new THREE.Vector3(0, lowestY, 0));\n    points.push(new THREE.Vector3(0, highestY, 0));\n    var geometry = new THREE.BufferGeometry().setFromPoints(points);\n    var line = new THREE.Line(geometry, material);\n    fgRef.current.scene().add(line);\n  }, []); // Add timeline YEAR\n\n  useEffect(() => {\n    // All YOBs\n    let years = d3Data.nodes.map(node => Number(node.yob)); // Filter out NaN\n\n    years = years.filter(year => !isNaN(year)); // Get list of fixed Y\n\n    let yRange = d3Data.nodes.map(node => Number(node.fy)); // Filter out NaN\n\n    yRange = yRange.filter(node => !isNaN(node) && node); // TIMELINE\n\n    const highestY = Math.max.apply(Math, yRange);\n    const lowestY = Math.min.apply(Math, yRange);\n    const halfY = (highestY + lowestY) / 2;\n    const quarterY = (halfY + lowestY) / 2;\n    const threeQuarterY = (halfY + highestY) / 2;\n    const earliestYOB = Math.min.apply(Math, years);\n    const latestYOB = Math.max.apply(Math, years);\n    const halfYOB = parseInt((earliestYOB + latestYOB) / 2);\n    const quarterYOB = parseInt((latestYOB + halfYOB) / 2);\n    const threeQuarterYOB = parseInt((earliestYOB + halfYOB) / 2); // EARLIEST\n\n    let earliest = new THREE.Mesh(new THREE.SphereGeometry(100), new THREE.MeshBasicMaterial({\n      depthWrite: false,\n      transparent: true,\n      opacity: 0\n    }));\n    earliest.position.y = highestY + 15;\n    let earliestTimeLabel = earliestYOB ? new SpriteText(earliestYOB) : new SpriteText(\"Earlier\");\n    earliestTimeLabel.color = '#f8f8f8';\n    earliestTimeLabel.fontFace = \"Montserrat\";\n    earliestTimeLabel.fontWeight = 800;\n    earliestTimeLabel.textHeight = 25;\n    earliest.add(earliestTimeLabel); // LATEST\n\n    let latest = new THREE.Mesh(new THREE.SphereGeometry(100), new THREE.MeshBasicMaterial({\n      depthWrite: false,\n      transparent: true,\n      opacity: 0\n    }));\n    latest.position.y = lowestY - 15;\n    let latestTimeLabel = latestYOB ? new SpriteText(latestYOB) : new SpriteText(\"Later\");\n    latestTimeLabel.color = '#f8f8f8';\n    latestTimeLabel.fontFace = \"Montserrat\";\n    latestTimeLabel.fontWeight = 800;\n    latestTimeLabel.textHeight = 25;\n    latest.add(latestTimeLabel); // HALF\n\n    let half = new THREE.Mesh(new THREE.SphereGeometry(100), new THREE.MeshBasicMaterial({\n      depthWrite: false,\n      transparent: true,\n      opacity: 0\n    }));\n    half.position.y = halfY;\n    let halfTimeLabel = new SpriteText(halfYOB);\n    halfTimeLabel.color = '#ccc';\n    halfTimeLabel.fontFace = \"Montserrat\";\n    halfTimeLabel.fontWeight = 800;\n    halfTimeLabel.textHeight = 15;\n    half.add(halfTimeLabel); // QUARTER\n\n    let quarter = new THREE.Mesh(new THREE.SphereGeometry(100), new THREE.MeshBasicMaterial({\n      depthWrite: false,\n      transparent: true,\n      opacity: 0\n    }));\n    quarter.position.y = quarterY;\n    let quarterTimeLabel = new SpriteText(quarterYOB);\n    quarterTimeLabel.color = '#ccc';\n    quarterTimeLabel.fontFace = \"Montserrat\";\n    quarterTimeLabel.fontWeight = 800;\n    quarterTimeLabel.textHeight = 15;\n    quarter.add(quarterTimeLabel); // QUARTER\n\n    let threeQuarter = new THREE.Mesh(new THREE.SphereGeometry(100), new THREE.MeshBasicMaterial({\n      depthWrite: false,\n      transparent: true,\n      opacity: 0\n    }));\n    threeQuarter.position.y = threeQuarterY;\n    let threeQuarterTimeLabel = new SpriteText(threeQuarterYOB);\n    threeQuarterTimeLabel.color = '#ccc';\n    threeQuarterTimeLabel.fontFace = \"Montserrat\";\n    threeQuarterTimeLabel.fontWeight = 800;\n    threeQuarterTimeLabel.textHeight = 15;\n    threeQuarter.add(threeQuarterTimeLabel);\n    fgRef.current.scene().add(earliest);\n    fgRef.current.scene().add(latest);\n    highestY - lowestY > 300 && fgRef.current.scene().add(half);\n    highestY - lowestY > 450 && fgRef.current.scene().add(quarter);\n    highestY - lowestY > 450 && fgRef.current.scene().add(threeQuarter);\n  }, []);\n  useEffect(() => {\n    fgRef.current.controls().enableDamping = true;\n    fgRef.current.controls().dampingFactor = 0.3;\n    fgRef.current.controls().rotateSpeed = 0.8;\n    fgRef.current.controls().screenSpacePanning = true;\n  }, []); // Create graph\n\n  return /*#__PURE__*/React.createElement(ForceGraph3D, {\n    ref: fgRef,\n    graphData: d3Data // Display\n    ,\n    width: width,\n    height: height,\n    backgroundColor: '#222',\n    showNavInfo: false // Controls\n    ,\n    controlType: 'orbit',\n    enableNodeDrag: false,\n    onBackgroundClick: clearHighlights,\n    onBackgroundRightClick: clearHighlights // Nodes\n    ,\n    nodeLabel: setNodeLabel,\n    nodeThreeObject: setNodeThreeObject,\n    onNodeClick: node => showFamily(d3Data, node, highlights),\n    onNodeRightClick: node => handleRightClick(d3Data, node, highlights) // LINKS\n    ,\n    linkLabel: setLinkLabel,\n    linkColor: setLinkColor,\n    linkOpacity: 1,\n    linkWidth: setLinkWidth,\n    linkDirectionalParticles: link => link.sourceType != 'CHIL' && link.targetType == 'CHIL' && d3Data.nodes.length < 300 ? 8 : 0,\n    linkDirectionalParticleWidth: setLinkParticleWidth,\n    linkDirectionalParticleSpeed: .001,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Graph;","map":{"version":3,"sources":["C:/Users/lianne/mygit/family_acestry_folder/familyancestry-wBloodlines/src/frontend/Graph.js"],"names":["React","useState","useEffect","useRef","useCallback","ForceGraph3D","THREE","SpriteText","forceCollide","Graph","d3Data","highlightedFamily","setHighlightedFamily","highlights","setHighlights","node","family","links","width","setWidth","window","innerWidth","height","setHeight","innerHeight","fgRef","current","d3Force","onresize","event","positionCamera","distance","distRatio","Math","hypot","x","y","z","cameraPosition","setNodeThreeObject","obj","Mesh","SphereGeometry","MeshBasicMaterial","depthWrite","transparent","opacity","name","firstName","surname","toUpperCase","sprite","coloredSprite","color","backgroundColor","borderColor","greyedSprite","borderWidth","indexOf","id","fontFace","fontWeight","textHeight","add","setNodeLabel","label","labelGender","gender","title","yob","yod","pob","bio","showFamily","findFamilies","source","target","updatedHighlightFamily","updatedHighlightLinks","push","index","filter","tempHighlights","handleRightClick","setLinkLabel","link","type","setLinkColor","length","sourceType","targetType","setLinkWidth","setLinkParticleWidth","clearHighlights","console","log","nodes","fogNear","fogFar","fogColor","Color","myFog","Fog","myFogg","FogExp2","scene","fog","yRange","map","Number","fy","isNaN","highestY","max","apply","lowestY","min","material","LineBasicMaterial","linewidth","points","Vector3","geometry","BufferGeometry","setFromPoints","line","Line","years","year","halfY","quarterY","threeQuarterY","earliestYOB","latestYOB","halfYOB","parseInt","quarterYOB","threeQuarterYOB","earliest","position","earliestTimeLabel","latest","latestTimeLabel","half","halfTimeLabel","quarter","quarterTimeLabel","threeQuarter","threeQuarterTimeLabel","controls","enableDamping","dampingFactor","rotateSpeed","screenSpacePanning"],"mappings":"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","sourcesContent":["// Modules\r\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport ForceGraph3D from 'react-force-graph-3d';\r\nimport * as THREE from 'three';\r\nimport SpriteText from 'three-spritetext';\r\nimport { forceCollide } from 'd3-force-3d';\r\n\r\nconst Graph = ({ d3Data, highlightedFamily, setHighlightedFamily }) => {\r\n\r\n  const [highlights, setHighlights] = useState({\r\n    node: null,\r\n    family: [],\r\n    links: []\r\n  });\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const [height, setHeight] = useState(window.innerHeight);\r\n\r\n  const fgRef = useRef();\r\n\r\n  // Manage force\r\n  useEffect(() => {\r\n    fgRef.current.d3Force('collide', forceCollide(55));\r\n  });\r\n\r\n  // Resize window\r\n  window.onresize = function(event) {\r\n    setWidth(window.innerWidth);\r\n    setHeight(window.innerHeight);\r\n  };\r\n\r\n  // Camera position\r\n  const positionCamera = useCallback(node => {\r\n    // Aim at node from outside it\r\n    const distance = 350;\r\n    const distRatio = 2 + distance/Math.hypot(node.x, node.y, node.z);\r\n    fgRef.current.cameraPosition(\r\n      { x: node.x * distRatio, y: node.y, z: node.z * distRatio }, // new position\r\n      node, // lookAt ({ x, y, z })\r\n      1200  // ms transition duration\r\n    );\r\n  }, [fgRef]);\r\n\r\n  // const cameraDistance = () => {\r\n  //   const distanceRatio = (d3Data.nodes.length/2) * 15;\r\n  //   if (distanceRatio < 450) {\r\n  //     return 450;\r\n  //   } else if (distanceRatio > 900) {\r\n  //     return 2000;\r\n  //   } else {\r\n  //     return distanceRatio;\r\n  //   }\r\n  // }\r\n\r\n  // Node design\r\n  const setNodeThreeObject = node => {\r\n    // Use a sphere as a drag handle\r\n    const obj = new THREE.Mesh(\r\n      new THREE.SphereGeometry(10),\r\n      new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 })\r\n    );\r\n\r\n    // Add text sprite as child\r\n    let name;\r\n    if (node.firstName === '?') {\r\n      name = node.name;\r\n    } else {\r\n      name = node.surname.toUpperCase() + ', ' + node.firstName;\r\n    }\r\n    let sprite = new SpriteText(name);\r\n\r\n    // Sprite defaults\r\n    const coloredSprite = () => {\r\n      sprite.color = node.color;\r\n      sprite.backgroundColor = '#222';\r\n      // sprite.padding = 1;\r\n      sprite.borderColor = '#444';\r\n      // sprite.borderWidth = 1;\r\n    }\r\n\r\n    const greyedSprite = () => {\r\n      sprite.color = '#222';\r\n      sprite.backgroundColor = false;\r\n      sprite.borderWidth = 0;\r\n    }\r\n\r\n    // NODE.COLOR\r\n    // No highlighted node\r\n    if (highlights.node === null) {\r\n      if (highlightedFamily) {\r\n        if (highlightedFamily === node.surname) {\r\n          coloredSprite();\r\n        } else {\r\n          greyedSprite();\r\n        }\r\n      } else {\r\n        coloredSprite();\r\n      }\r\n    } else {\r\n      if (highlights.family.indexOf(node.id) !== -1) {\r\n        coloredSprite();\r\n      } else {\r\n        greyedSprite();\r\n      }\r\n    }\r\n\r\n    sprite.fontFace = \"Montserrat\";\r\n    sprite.fontWeight = 600;\r\n    sprite.textHeight = 10;\r\n    obj.add(sprite);\r\n    return obj;\r\n  }\r\n\r\n  // Node label\r\n  const setNodeLabel = node => {\r\n\r\n    // Label setup\r\n    let label = `<div class=\"node-label\">`;\r\n\r\n    // Gender\r\n    const labelGender = (node.gender === 'M') ? `♂` : `♀`;\r\n\r\n    // Name\r\n    if (node.title) {\r\n      label += `<h4 class=\"node-title\"><span style=\"color:${node.color}\">${node.name} (${node.title})</span> ${labelGender}</h4>`;\r\n    } else {\r\n      label += `<h4><span style=\"color:${node.color}\">${node.name}</span> ${labelGender}</h4>`;\r\n    }\r\n    // Lifespan\r\n    label += `<p><b>${node.yob} - ${node.yod}</b></p>`;\r\n    // Birthplace\r\n    if (node.pob !== '') {\r\n      label += `<p><b>From:</b> ${node.pob}</p>`\r\n    }\r\n    // Deathplace\r\n    // if (node.pod != '') {\r\n    //   label += `<p><b>Died:</b> ${node.pod}</p>`\r\n    // }\r\n    // Bio\r\n    if (node.bio) {\r\n      label += `<p>${node.bio}</p>`\r\n    }\r\n\r\n    return label += '</div>';\r\n  }\r\n\r\n  // Handle node click\r\n  const showFamily = (d3Data, node, highlights) => {\r\n\r\n    // Find family member of clicked node\r\n    const findFamilies = (links, node, highlights) => {\r\n      if (links.source.id === node.id || links.target.id === node.id) {\r\n        let updatedHighlightFamily = highlights.family;\r\n        let updatedHighlightLinks = highlights.links;\r\n\r\n        updatedHighlightFamily.push(links.target.id, links.source.id);\r\n        updatedHighlightLinks.push(links.index);\r\n\r\n        setHighlights({node: node, family: updatedHighlightFamily, links: updatedHighlightLinks})\r\n      }\r\n    }\r\n\r\n    // None highlighted\r\n    if (highlights.node === null) {\r\n      d3Data.links.filter(links => findFamilies(links, node, highlights));\r\n\r\n    // Different node highlighted\r\n    } else if (highlights.node !== node) {\r\n      let tempHighlights = {node: null, family: [], links: []}\r\n      d3Data.links.filter(links => findFamilies(links, node, tempHighlights));\r\n\r\n    // Reset current node\r\n    } else {\r\n      setHighlights({node: null, family: [], links: []})\r\n    }\r\n  }\r\n\r\n  // Right click\r\n  const handleRightClick = (d3Data, node, highlights) => {\r\n    showFamily(d3Data, node, highlights);\r\n    positionCamera(node);\r\n  }\r\n\r\n\r\n  // Link label\r\n  const setLinkLabel = link => {\r\n    // No state change\r\n    switch(link.type) {\r\n      case 'DIV':\r\n        return '<div class=\"link-label\"><p>Divorced</p></div>';\r\n        break;\r\n      case 'MARR':\r\n        return '<div class=\"link-label\"><p>Married</p></div>';\r\n        break;\r\n      case 'birth':\r\n        return '<div class=\"link-label\"><p>Birth</p></div>';\r\n        break;\r\n      case 'Natural':\r\n        return '<div class=\"link-label\"><p>Birth</p></div>';\r\n        break;\r\n      case 'Step':\r\n        return '<div class=\"link-label\"><p>Step</p></div>';\r\n        break;\r\n      case 'Adopted':\r\n        return '<div class=\"link-label\"><p>Adopted</p></div>';\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Link color\r\n  const setLinkColor = link => {\r\n\r\n    return highlights.links.length < 1 ?\r\n      highlightedFamily ?\r\n        'rgba(255, 153, 153, 0.2)' : // Highlighed family exists, mute all links\r\n        (link.sourceType != 'CHIL' && link.targetType != 'CHIL') ?\r\n          'rgba(255, 215, 0, 0.6)' : // Romantic link\r\n          'rgba(255, 153, 153, 0.2)' : // Normal link\r\n      highlights.links.indexOf(link.index) !== -1 ?\r\n      (link.sourceType != 'CHIL' && link.targetType != 'CHIL') ?\r\n        'rgba(255, 215, 0, 0.6)' : // Romantic link\r\n        'rgba(255, 153, 153, 0.2)' : // Normal link\r\n      'rgba(255, 153, 153, 0.2)'; // Normal link\r\n  }\r\n\r\n  // Link width\r\n  const setLinkWidth = link => {\r\n    if (highlights.links.indexOf(link.index) !== -1) {\r\n      return 1.7;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  // Link particles\r\n  const setLinkParticleWidth = link => {\r\n    if (highlights.links.indexOf(link.index) !== -1) {\r\n      return 2;\r\n    } else {\r\n      return 0.1;\r\n    }\r\n  }\r\n\r\n  // Remove highlights\r\n  const clearHighlights = () => {\r\n    setHighlights({node: null, family: [], links: []});\r\n    setHighlightedFamily();\r\n  }\r\n\r\n  // Add fog\r\n  useEffect(() => {\r\n    console.log(d3Data.nodes.length);\r\n    let fogNear = 1000;\r\n    let fogFar = 8000;\r\n    if (d3Data.nodes.length < 120) {\r\n      console.log('two');\r\n      fogNear = 600;\r\n      fogFar = 4000;\r\n    };\r\n\r\n    const fogColor = new THREE.Color(0x111111);\r\n\r\n    var myFog = new THREE.Fog(fogColor, fogNear, fogFar);\r\n    var myFogg = new THREE.FogExp2(fogColor, 0.0025);\r\n\r\n    fgRef.current.scene().fog = myFog;\r\n  }, []);\r\n\r\n\r\n  // Add timeline\r\n  useEffect(() => {\r\n\r\n    // Get list of fixed Y\r\n    let yRange = d3Data.nodes.map(node => Number(node.fy));\r\n\r\n    // Filter our NaN\r\n    yRange = yRange.filter(node => !isNaN(node) && node);\r\n\r\n    // TIMELINE\r\n    const highestY = Math.max.apply(Math, yRange);\r\n    const lowestY = Math.min.apply(Math, yRange);\r\n\r\n    //create a blue LineBasicMaterial\r\n    var material = new THREE.LineBasicMaterial( {\r\n      color: 0x333333,\r\n      linewidth: 2\r\n    } );\r\n\r\n    var points = [];\r\n    points.push( new THREE.Vector3( 0, lowestY, 0 ) );\r\n    points.push( new THREE.Vector3( 0, highestY, 0 ) );\r\n\r\n    var geometry = new THREE.BufferGeometry().setFromPoints( points );\r\n\r\n    var line = new THREE.Line( geometry, material );\r\n\r\n    fgRef.current.scene().add(line);\r\n  }, []);\r\n\r\n  // Add timeline YEAR\r\n  useEffect(() => {\r\n\r\n    // All YOBs\r\n    let years = d3Data.nodes.map(node => Number(node.yob));\r\n\r\n    // Filter out NaN\r\n    years = years.filter(year => !isNaN(year));\r\n\r\n    // Get list of fixed Y\r\n    let yRange = d3Data.nodes.map(node => Number(node.fy));\r\n\r\n    // Filter out NaN\r\n    yRange = yRange.filter(node => !isNaN(node) && node);\r\n\r\n    // TIMELINE\r\n    const highestY = Math.max.apply(Math, yRange);\r\n    const lowestY = Math.min.apply(Math, yRange);\r\n    const halfY = (highestY + lowestY)/2;\r\n    const quarterY = (halfY + lowestY)/2;\r\n    const threeQuarterY = (halfY + highestY)/2;\r\n\r\n\r\n    const earliestYOB = Math.min.apply(Math, years);\r\n    const latestYOB = Math.max.apply(Math, years);\r\n    const halfYOB = parseInt((earliestYOB + latestYOB)/2);\r\n    const quarterYOB = parseInt((latestYOB + halfYOB)/2);\r\n    const threeQuarterYOB = parseInt((earliestYOB + halfYOB)/2);\r\n\r\n    // EARLIEST\r\n    let earliest = new THREE.Mesh(\r\n      new THREE.SphereGeometry(100),\r\n      new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 }),\r\n    );\r\n\r\n    earliest.position.y = highestY + 15;\r\n\r\n    let earliestTimeLabel = earliestYOB ? new SpriteText(earliestYOB) : new SpriteText(\"Earlier\");\r\n    earliestTimeLabel.color = '#f8f8f8';\r\n    earliestTimeLabel.fontFace = \"Montserrat\";\r\n    earliestTimeLabel.fontWeight = 800;\r\n    earliestTimeLabel.textHeight = 25;\r\n    earliest.add(earliestTimeLabel);\r\n\r\n    // LATEST\r\n    let latest = new THREE.Mesh(\r\n      new THREE.SphereGeometry(100),\r\n      new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 }),\r\n    );\r\n\r\n    latest.position.y = lowestY - 15;\r\n\r\n    let latestTimeLabel = latestYOB ? new SpriteText(latestYOB) : new SpriteText(\"Later\");\r\n    latestTimeLabel.color = '#f8f8f8';\r\n    latestTimeLabel.fontFace = \"Montserrat\";\r\n    latestTimeLabel.fontWeight = 800;\r\n    latestTimeLabel.textHeight = 25;\r\n    latest.add(latestTimeLabel);\r\n\r\n    // HALF\r\n    let half = new THREE.Mesh(\r\n      new THREE.SphereGeometry(100),\r\n      new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 }),\r\n    );\r\n\r\n    half.position.y = halfY;\r\n\r\n    let halfTimeLabel = new SpriteText(halfYOB);\r\n    halfTimeLabel.color = '#ccc';\r\n    halfTimeLabel.fontFace = \"Montserrat\";\r\n    halfTimeLabel.fontWeight = 800;\r\n    halfTimeLabel.textHeight = 15;\r\n    half.add(halfTimeLabel);\r\n\r\n    // QUARTER\r\n    let quarter = new THREE.Mesh(\r\n      new THREE.SphereGeometry(100),\r\n      new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 }),\r\n    );\r\n\r\n    quarter.position.y = quarterY;\r\n\r\n    let quarterTimeLabel = new SpriteText(quarterYOB);\r\n    quarterTimeLabel.color = '#ccc';\r\n    quarterTimeLabel.fontFace = \"Montserrat\";\r\n    quarterTimeLabel.fontWeight = 800;\r\n    quarterTimeLabel.textHeight = 15;\r\n    quarter.add(quarterTimeLabel);\r\n\r\n    // QUARTER\r\n    let threeQuarter = new THREE.Mesh(\r\n      new THREE.SphereGeometry(100),\r\n      new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 }),\r\n    );\r\n\r\n    threeQuarter.position.y = threeQuarterY;\r\n\r\n    let threeQuarterTimeLabel = new SpriteText(threeQuarterYOB);\r\n    threeQuarterTimeLabel.color = '#ccc';\r\n    threeQuarterTimeLabel.fontFace = \"Montserrat\";\r\n    threeQuarterTimeLabel.fontWeight = 800;\r\n    threeQuarterTimeLabel.textHeight = 15;\r\n    threeQuarter.add(threeQuarterTimeLabel);\r\n\r\n    fgRef.current.scene().add(earliest);\r\n    fgRef.current.scene().add(latest);\r\n    highestY-lowestY > 300 && fgRef.current.scene().add(half);\r\n    highestY-lowestY > 450 && fgRef.current.scene().add(quarter);\r\n    highestY-lowestY > 450 && fgRef.current.scene().add(threeQuarter);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fgRef.current.controls().enableDamping = true;\r\n    fgRef.current.controls().dampingFactor = 0.3;\r\n    fgRef.current.controls().rotateSpeed = 0.8;\r\n    fgRef.current.controls().screenSpacePanning = true;\r\n  }, [])\r\n\r\n\r\n  // Create graph\r\n  return <ForceGraph3D\r\n    ref={fgRef}\r\n    graphData={d3Data}\r\n\r\n    // Display\r\n    width={width}\r\n    height={height}\r\n    backgroundColor={'#222'}\r\n    showNavInfo={false}\r\n\r\n    // Controls\r\n    controlType={'orbit'}\r\n    enableNodeDrag={false}\r\n    onBackgroundClick={clearHighlights}\r\n    onBackgroundRightClick={clearHighlights}\r\n\r\n    // Nodes\r\n    nodeLabel={setNodeLabel}\r\n    nodeThreeObject={setNodeThreeObject}\r\n    onNodeClick={node => showFamily(d3Data, node, highlights)}\r\n    onNodeRightClick={node => handleRightClick(d3Data, node, highlights)}\r\n\r\n    // LINKS\r\n    linkLabel={setLinkLabel}\r\n    linkColor={setLinkColor}\r\n    linkOpacity={1}\r\n    linkWidth={setLinkWidth}\r\n    linkDirectionalParticles={link => (link.sourceType != 'CHIL' && link.targetType == 'CHIL' && d3Data.nodes.length < 300) ? 8 : 0}\r\n    linkDirectionalParticleWidth={setLinkParticleWidth}\r\n    linkDirectionalParticleSpeed={.001}\r\n  />\r\n}\r\n\r\nexport default Graph;\r\n"]},"metadata":{},"sourceType":"module"}