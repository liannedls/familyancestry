{"ast":null,"code":"import { withSameIDs } from '../utils';\nexport default (store => {\n  return function (family) {\n    if (family.cID === null) return;\n    let right = 0;\n\n    while (family) {\n      const fUnit = family.cUnits[0];\n\n      if (family.pUnits.length === 2 && family.pCount > 2) {\n        fUnit.shift = Math.floor(family.pUnits[1].shift / 2);\n      }\n\n      const shift = fUnit.shift;\n      right = Math.max(right, family.right);\n      const cFamily = store.getFamily(family.cID);\n\n      if (cFamily.cID === null) {\n        fUnit.shift = (family.width - fUnit.size * 2) / 2;\n        break;\n      }\n\n      const pUnit = cFamily.pUnits.find(withSameIDs(fUnit));\n      const uIndex = cFamily.pUnits.findIndex(unit => unit.nodes[0].id === fUnit.nodes[0].id);\n\n      if (uIndex === 0 && pUnit.shift === 0) {\n        const left = family.left + shift;\n        cFamily.left = Math.max(cFamily.left, left);\n      } else {\n        pUnit.shift = family.left + fUnit.shift - cFamily.left;\n      }\n\n      const next = cFamily.pUnits[uIndex + 1];\n\n      if (next) {\n        const diff = right - (cFamily.left + next.shift);\n\n        if (diff > 0) {\n          for (let i = uIndex + 1; i < cFamily.pUnits.length; i++) {\n            cFamily.pUnits[i].shift += diff;\n          }\n        }\n      }\n\n      family = cFamily;\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}