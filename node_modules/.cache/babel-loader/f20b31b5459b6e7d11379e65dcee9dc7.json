{"ast":null,"code":"import hasHiddenRelatives from './hasHiddenRelatives';\nimport { flat } from './index';\nconst PARENTS = ['root', 'parent'];\nconst CHILDREN = ['root', 'child'];\n\nconst extendNode = family => unit => unit.nodes.map((node, idx) => Object.assign({}, node, {\n  top: family.top + (unit.isChild ? 2 : 0),\n  left: family.left + unit.shift + idx * 2,\n  hasSubTree: hasHiddenRelatives(family, node)\n}));\n\nconst getParentNodes = family => (~PARENTS.indexOf(family.type) ? family.pUnits : []).map(extendNode(family));\n\nconst getChildNodes = family => (~CHILDREN.indexOf(family.type) ? family.cUnits : []).map(extendNode(family));\n\nconst mapFamily = family => [...getParentNodes(family), ...getChildNodes(family)].reduce(flat);\n\nexport default (families => families.map(mapFamily).reduce(flat));","map":{"version":3,"sources":["../../src/utils/getExtendedNodes.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,SAAS,IAAT,QAAqB,SAArB;AAKA,MAAM,OAAO,GAAG,CAAC,MAAD,EAAS,QAAT,CAAhB;AACA,MAAM,QAAQ,GAAG,CAAC,MAAD,EAAS,OAAT,CAAjB;;AAEA,MAAM,UAAU,GAAI,MAAD,IAAqB,IAAD,IACrC,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,CAAC,IAAD,EAAoB,GAApB,KAAoC,MAAA,CAAA,MAAA,CAAA,EAAA,EAC9C,IAD8C,EAC1C;AACP,EAAA,GAAG,EAAE,MAAM,CAAC,GAAP,IAAc,IAAI,CAAC,OAAL,GAAe,CAAf,GAAmB,CAAjC,CADE;AAEP,EAAA,IAAI,EAAE,MAAM,CAAC,IAAP,GAAc,IAAI,CAAC,KAAnB,GAA4B,GAAG,GAAG,CAFjC;AAGP,EAAA,UAAU,EAAE,kBAAkB,CAAC,MAAD,EAAS,IAAT;AAHvB,CAD0C,CAAnD,CADF;;AASA,MAAM,cAAc,GAAI,MAAD,IACrB,CAAC,CAAC,OAAO,CAAC,OAAR,CAAgB,MAAM,CAAC,IAAvB,CAAD,GAAgC,MAAM,CAAC,MAAvC,GAAgD,EAAjD,EAAqD,GAArD,CAAyD,UAAU,CAAC,MAAD,CAAnE,CADF;;AAGA,MAAM,aAAa,GAAI,MAAD,IACpB,CAAC,CAAC,QAAQ,CAAC,OAAT,CAAiB,MAAM,CAAC,IAAxB,CAAD,GAAiC,MAAM,CAAC,MAAxC,GAAiD,EAAlD,EAAsD,GAAtD,CAA0D,UAAU,CAAC,MAAD,CAApE,CADF;;AAGA,MAAM,SAAS,GAAI,MAAD,IAChB,CAAC,GAAG,cAAc,CAAC,MAAD,CAAlB,EAA4B,GAAG,aAAa,CAAC,MAAD,CAA5C,EAAsD,MAAtD,CAA6D,IAA7D,CADF;;AAGA,gBAAgB,QAAD,IACb,QAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,MAAxB,CAA+B,IAA/B,CADF","sourceRoot":"","sourcesContent":["import hasHiddenRelatives from './hasHiddenRelatives';\nimport { flat } from './index';\nconst PARENTS = ['root', 'parent'];\nconst CHILDREN = ['root', 'child'];\nconst extendNode = (family) => (unit) => (unit.nodes.map((node, idx) => (Object.assign({}, node, { top: family.top + (unit.isChild ? 2 : 0), left: family.left + unit.shift + (idx * 2), hasSubTree: hasHiddenRelatives(family, node) }))));\nconst getParentNodes = (family) => (~PARENTS.indexOf(family.type) ? family.pUnits : []).map(extendNode(family));\nconst getChildNodes = (family) => (~CHILDREN.indexOf(family.type) ? family.cUnits : []).map(extendNode(family));\nconst mapFamily = (family) => [...getParentNodes(family), ...getChildNodes(family)].reduce(flat);\nexport default (families) => families.map(mapFamily).reduce(flat);\n//# sourceMappingURL=getExtendedNodes.js.map"]},"metadata":{},"sourceType":"module"}