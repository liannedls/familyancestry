{"ast":null,"code":"import Family from '../models/family';\nimport Unit from '../models/unit';\nimport { withId, relToNode } from '../utils';\nimport getSpouses from '../utils/getSpouses';\nimport setUnitDefShifts from '../utils/setUnitDefShifts';\nexport default (store => {\n  return function (parentIDs, type = 'root', isMain = false) {\n    const family = new Family(store.getNextId(), type, isMain);\n    const parents = parentIDs.map(store.getNode.bind(store));\n    if (family.main) parents.sort((a, b) => b.gender !== store.gender ? -1 : 0);\n    family.pUnits.push(new Unit(family.id, parents));\n    let children = [];\n\n    if (parents.length === 1) {\n      children = parents[0].children.map(relToNode(store));\n    } else {\n      const firstParent = parents[0];\n      const secondParent = parents[1];\n      children = firstParent.children.filter(rel => secondParent.children.find(withId(rel.id))).map(relToNode(store));\n    }\n\n    children.forEach(child => {\n      if (child.spouses.length) {\n        const {\n          left,\n          middle,\n          right\n        } = getSpouses(store, [child]);\n        [...left.map(node => [node]), middle, ...right.map(node => [node])].forEach(nodes => family.cUnits.push(new Unit(family.id, nodes, true)));\n      } else {\n        family.cUnits.push(new Unit(family.id, [child], true));\n      }\n    });\n    setUnitDefShifts(family);\n    return family;\n  };\n});","map":{"version":3,"sources":["../../src/children/byParents.ts"],"names":[],"mappings":"AACA,OAAO,MAAP,MAAmB,kBAAnB;AACA,OAAO,IAAP,MAAiB,gBAAjB;AACA,SAAS,MAAT,EAAiB,SAAjB,QAAkC,UAAlC;AACA,OAAO,UAAP,MAAuB,qBAAvB;AACA,OAAO,gBAAP,MAA6B,2BAA7B;AAGA,gBAAgB,KAAD,IAAiB;AAC9B,SAAO,UAAU,SAAV,EAA+B,IAAA,GAAmB,MAAlD,EAA0D,MAAA,GAAkB,KAA5E,EAAiF;AACtF,UAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,KAAK,CAAC,SAAN,EAAX,EAA8B,IAA9B,EAAoC,MAApC,CAAf;AAEA,UAAM,OAAO,GAAG,SAAS,CAAC,GAAV,CAAc,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,KAAnB,CAAd,CAAhB;AACA,QAAI,MAAM,CAAC,IAAX,EAAiB,OAAO,CAAC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAW,CAAC,CAAC,MAAF,KAAa,KAAK,CAAC,MAApB,GAA8B,CAAC,CAA/B,GAAmC,CAA1D;AAEjB,IAAA,MAAM,CAAC,MAAP,CAAc,IAAd,CAAmB,IAAI,IAAJ,CAAS,MAAM,CAAC,EAAhB,EAAoB,OAApB,CAAnB;AAGA,QAAI,QAAQ,GAAkB,EAA9B;;AAEA,QAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,MAAA,QAAQ,GAAG,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,CAAoB,GAApB,CAAwB,SAAS,CAAC,KAAD,CAAjC,CAAX;AACD,KAFD,MAEO;AACL,YAAM,WAAW,GAAG,OAAO,CAAC,CAAD,CAA3B;AACA,YAAM,YAAY,GAAG,OAAO,CAAC,CAAD,CAA5B;AAEA,MAAA,QAAQ,GAAG,WAAW,CAAC,QAAZ,CACR,MADQ,CACD,GAAG,IAAI,YAAY,CAAC,QAAb,CAAsB,IAAtB,CAA2B,MAAM,CAAC,GAAG,CAAC,EAAL,CAAjC,CADN,EAER,GAFQ,CAEJ,SAAS,CAAC,KAAD,CAFL,CAAX;AAGD;;AAGD,IAAA,QAAQ,CAAC,OAAT,CAAiB,KAAK,IAAG;AACvB,UAAI,KAAK,CAAC,OAAN,CAAc,MAAlB,EAA0B;AACxB,cAAM;AAAE,UAAA,IAAF;AAAQ,UAAA,MAAR;AAAgB,UAAA;AAAhB,YAA0B,UAAU,CAAC,KAAD,EAAQ,CAAC,KAAD,CAAR,CAA1C;AACA,SAAC,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,IAAI,CAAC,IAAD,CAAjB,CAAJ,EAA8B,MAA9B,EAAsC,GAAG,KAAK,CAAC,GAAN,CAAU,IAAI,IAAI,CAAC,IAAD,CAAlB,CAAzC,EAAoE,OAApE,CAA4E,KAAK,IAC/E,MAAM,CAAC,MAAP,CAAc,IAAd,CAAmB,IAAI,IAAJ,CAAS,MAAM,CAAC,EAAhB,EAAoB,KAApB,EAA2B,IAA3B,CAAnB,CADF;AAGD,OALD,MAKO;AACL,QAAA,MAAM,CAAC,MAAP,CAAc,IAAd,CAAmB,IAAI,IAAJ,CAAS,MAAM,CAAC,EAAhB,EAAoB,CAAC,KAAD,CAApB,EAA6B,IAA7B,CAAnB;AACD;AACF,KATD;AAWA,IAAA,gBAAgB,CAAC,MAAD,CAAhB;AACA,WAAO,MAAP;AACD,GApCD;AAqCD,CAtCD","sourceRoot":"","sourcesContent":["import Family from '../models/family';\nimport Unit from '../models/unit';\nimport { withId, relToNode } from '../utils';\nimport getSpouses from '../utils/getSpouses';\nimport setUnitDefShifts from '../utils/setUnitDefShifts';\nexport default (store) => {\n    return function (parentIDs, type = 'root', isMain = false) {\n        const family = new Family(store.getNextId(), type, isMain);\n        const parents = parentIDs.map(store.getNode.bind(store));\n        if (family.main)\n            parents.sort((a, b) => (b.gender !== store.gender) ? -1 : 0);\n        family.pUnits.push(new Unit(family.id, parents));\n        let children = [];\n        if (parents.length === 1) {\n            children = parents[0].children.map(relToNode(store));\n        }\n        else {\n            const firstParent = parents[0];\n            const secondParent = parents[1];\n            children = firstParent.children\n                .filter(rel => secondParent.children.find(withId(rel.id)))\n                .map(relToNode(store));\n        }\n        children.forEach(child => {\n            if (child.spouses.length) {\n                const { left, middle, right } = getSpouses(store, [child]);\n                [...left.map(node => [node]), middle, ...right.map(node => [node])].forEach(nodes => (family.cUnits.push(new Unit(family.id, nodes, true))));\n            }\n            else {\n                family.cUnits.push(new Unit(family.id, [child], true));\n            }\n        });\n        setUnitDefShifts(family);\n        return family;\n    };\n};\n//# sourceMappingURL=byParents.js.map"]},"metadata":{},"sourceType":"module"}