{"ast":null,"code":"import { isDraft, finishDraft, createDraft, setAutoFreeze } from 'immer-peasy';\nimport React, { createContext, useContext, useRef, useReducer, useLayoutEffect, useEffect, useMemo, useState } from 'react';\nimport { compose, createStore as createStore$1, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport memoizerific from 'memoizerific';\nvar StoreContext = createContext(); // To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nfunction createStoreStateHook(Context) {\n  return function useStoreState(mapState) {\n    var store = useContext(Context);\n    var mapStateRef = useRef(mapState);\n    var stateRef = useRef();\n    var mountedRef = useRef(true);\n    var subscriptionMapStateError = useRef();\n\n    var _useReducer = useReducer(function (s) {\n      return s + 1;\n    }, 0),\n        forceRender = _useReducer[1];\n\n    if (subscriptionMapStateError.current || mapStateRef.current !== mapState || stateRef.current === undefined) {\n      try {\n        stateRef.current = mapState(store.getState());\n      } catch (err) {\n        var errorMessage = \"An error occurred trying to map state in a useStoreState hook: \" + err.message + \".\";\n\n        if (subscriptionMapStateError.current) {\n          errorMessage += \"\\nThis error may be related to the following error:\\n\" + subscriptionMapStateError.current.stack + \"\\n\\nOriginal stack trace:\";\n        }\n\n        throw new Error(errorMessage);\n      }\n    }\n\n    useIsomorphicLayoutEffect(function () {\n      mapStateRef.current = mapState;\n      subscriptionMapStateError.current = undefined;\n    });\n    useIsomorphicLayoutEffect(function () {\n      var checkMapState = function checkMapState() {\n        try {\n          var newState = mapStateRef.current(store.getState());\n\n          if (newState === stateRef.current) {\n            return;\n          }\n\n          stateRef.current = newState;\n        } catch (err) {\n          // see https://github.com/reduxjs/react-redux/issues/1179\n          // There is a possibility mapState will fail due to stale state or\n          // props, therefore we will just track the error and force our\n          // component to update. It should then receive the updated state\n          subscriptionMapStateError.current = err;\n        }\n\n        if (mountedRef.current) {\n          forceRender({});\n        }\n      };\n\n      var unsubscribe = store.subscribe(checkMapState);\n      checkMapState();\n      return function () {\n        mountedRef.current = false;\n        unsubscribe();\n      };\n    }, []);\n    return stateRef.current;\n  };\n}\n\nvar useStoreState = createStoreStateHook(StoreContext);\n\nfunction createStoreActionsHook(Context) {\n  return function useStoreActions(mapActions) {\n    var store = useContext(Context);\n    return mapActions(store.getActions());\n  };\n}\n\nvar useStoreActions = createStoreActionsHook(StoreContext);\n\nfunction createStoreDispatchHook(Context) {\n  return function useStoreDispatch() {\n    var store = useContext(Context);\n    return store.dispatch;\n  };\n}\n\nvar useStoreDispatch = createStoreDispatchHook(StoreContext);\n\nfunction useStore() {\n  return useContext(StoreContext);\n}\n\nfunction createTypedHooks() {\n  return {\n    useStoreActions: useStoreActions,\n    useStoreDispatch: useStoreDispatch,\n    useStoreState: useStoreState,\n    useStore: useStore\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar actionSymbol = 'ðŸ™ˆactionðŸ™ˆ';\nvar actionOnSymbol = 'ðŸ™ˆactionOnðŸ™ˆ';\nvar computedSymbol = 'ðŸ™ˆcomputedSymbolðŸ™ˆ';\nvar reducerSymbol = 'ðŸ™ˆreducerðŸ™ˆ';\nvar thunkOnSymbol = 'ðŸ™ˆthunkOnðŸ™ˆ';\nvar thunkSymbol = 'ðŸ™ˆthunkðŸ™ˆ';\n\nvar debug = function debug(state) {\n  if (isDraft(state)) {\n    return finishDraft(createDraft(state));\n  }\n\n  return state;\n};\n\nvar memo = function memo(fn, cacheSize) {\n  return memoizerific(cacheSize)(fn);\n};\n\nvar actionOn = function actionOn(targetResolver, fn) {\n  fn[actionOnSymbol] = {\n    targetResolver: targetResolver\n  };\n  return fn;\n};\n\nvar action = function action(fn) {\n  fn[actionSymbol] = {};\n  return fn;\n};\n\nvar defaultStateResolvers = [function (state) {\n  return state;\n}];\n\nvar computed = function computed(fnOrStateResolvers, fn) {\n  if (typeof fn === 'function') {\n    fn[computedSymbol] = {\n      stateResolvers: fnOrStateResolvers\n    };\n    return fn;\n  }\n\n  fnOrStateResolvers[computedSymbol] = {\n    stateResolvers: defaultStateResolvers\n  };\n  return fnOrStateResolvers;\n};\n\nvar thunkOn = function thunkOn(targetResolver, fn) {\n  fn[thunkOnSymbol] = {\n    targetResolver: targetResolver\n  };\n  return fn;\n};\n\nvar thunk = function thunk(fn) {\n  fn[thunkSymbol] = {};\n  return fn;\n};\n\nvar reducer = function reducer(fn) {\n  fn[reducerSymbol] = {};\n  return fn;\n};\n\nvar isStateObject = function isStateObject(x) {\n  return x !== null && typeof x === 'object' && !Array.isArray(x) && x.constructor === Object;\n};\n\nvar get = function get(path, target) {\n  return path.reduce(function (acc, cur) {\n    return isStateObject(acc) ? acc[cur] : undefined;\n  }, target);\n};\n\nvar set = function set(path, target, value) {\n  path.reduce(function (acc, cur, idx) {\n    if (idx + 1 === path.length) {\n      acc[cur] = value;\n    } else {\n      acc[cur] = acc[cur] || {};\n    }\n\n    return acc[cur];\n  }, target);\n};\n\nvar newify = function newify(currentPath, currentState, finalValue) {\n  if (currentPath.length === 0) {\n    return finalValue;\n  }\n\n  var newState = _extends({}, currentState);\n\n  var key = currentPath[0];\n\n  if (currentPath.length === 1) {\n    newState[key] = finalValue;\n  } else {\n    newState[key] = newify(currentPath.slice(1), newState[key], finalValue);\n  }\n\n  return newState;\n};\n\nfunction createStoreInternals(_ref) {\n  var disableImmer = _ref.disableImmer,\n      initialState = _ref.initialState,\n      injections = _ref.injections,\n      model = _ref.model,\n      reducerEnhancer = _ref.reducerEnhancer,\n      references = _ref.references;\n\n  function simpleProduce(path, state, fn) {\n    if (disableImmer) {\n      var _current = get(path, state);\n\n      var next = fn(_current);\n\n      if (_current !== next) {\n        return newify(path, state, next);\n      }\n\n      return state;\n    }\n\n    var draft = createDraft(state);\n    var current = get(path, draft);\n    fn(current);\n    return finishDraft(draft);\n  }\n\n  var defaultState = initialState;\n  var actionCreatorDict = {};\n  var actionCreators = {};\n  var actionReducersDict = {};\n  var actionThunks = {};\n  var computedProperties = [];\n  var customReducers = [];\n  var listenerActionCreators = {};\n  var listenerActionMap = {};\n  var listenerDefinitions = [];\n  var computedState = {\n    isInReducer: false,\n    currentState: defaultState\n  };\n\n  var recursiveExtractDefsFromModel = function recursiveExtractDefsFromModel(current, parentPath) {\n    return Object.keys(current).forEach(function (key) {\n      var value = current[key];\n      var path = [].concat(parentPath, [key]);\n      var meta = {\n        parent: parentPath,\n        path: path\n      };\n\n      var handleValueAsState = function handleValueAsState() {\n        var initialParentRef = get(parentPath, initialState);\n\n        if (initialParentRef && key in initialParentRef) {\n          set(path, defaultState, initialParentRef[key]);\n        } else {\n          set(path, defaultState, value);\n        }\n      };\n\n      if (typeof value === 'function') {\n        if (value[actionSymbol] || value[actionOnSymbol]) {\n          var prefix = value[actionSymbol] ? '@action' : '@actionOn';\n          var type = prefix + \".\" + path.join('.');\n          var actionMeta = value[actionSymbol] || value[actionOnSymbol];\n          actionMeta.actionName = key;\n          actionMeta.type = type;\n          actionMeta.parent = meta.parent;\n          actionMeta.path = meta.path; // Action Reducer\n\n          actionReducersDict[type] = value; // Action Creator\n\n          var actionCreator = function actionCreator(payload) {\n            var actionDefinition = {\n              type: type,\n              payload: payload\n            };\n\n            if (value[actionOnSymbol] && actionMeta.resolvedTargets) {\n              payload.resolvedTargets = [].concat(actionMeta.resolvedTargets);\n            }\n\n            var result = references.dispatch(actionDefinition);\n            return result;\n          };\n\n          actionCreator.type = type;\n          actionCreatorDict[type] = actionCreator;\n\n          if (key !== 'easyPeasyReplaceState') {\n            if (value[actionOnSymbol]) {\n              listenerDefinitions.push(value);\n              set(path, listenerActionCreators, actionCreator);\n            } else {\n              set(path, actionCreators, actionCreator);\n            }\n          }\n        } else if (value[thunkSymbol] || value[thunkOnSymbol]) {\n          var _prefix = value[thunkSymbol] ? '@thunk' : '@thunkOn';\n\n          var _type = _prefix + \".\" + path.join('.');\n\n          var thunkMeta = value[thunkSymbol] || value[thunkOnSymbol];\n          thunkMeta.actionName = key;\n          thunkMeta.type = _type;\n          thunkMeta.parent = meta.parent;\n          thunkMeta.path = meta.path; // Thunk Action\n\n          var thunkHandler = function thunkHandler(payload) {\n            var helpers = {\n              dispatch: references.dispatch,\n              getState: function getState() {\n                return get(parentPath, references.getState());\n              },\n              getStoreActions: function getStoreActions() {\n                return actionCreators;\n              },\n              getStoreState: references.getState,\n              injections: injections,\n              meta: meta\n            };\n\n            if (value[thunkOnSymbol] && thunkMeta.resolvedTargets) {\n              payload.resolvedTargets = [].concat(thunkMeta.resolvedTargets);\n            }\n\n            return value(get(parentPath, actionCreators), payload, helpers);\n          };\n\n          set(path, actionThunks, thunkHandler); // Thunk Action Creator\n\n          var startType = _type + \"(start)\";\n          var successType = _type + \"(success)\";\n          var failType = _type + \"(fail)\";\n\n          var _actionCreator = function _actionCreator(payload) {\n            var dispatchError = function dispatchError(err) {\n              references.dispatch({\n                type: failType,\n                payload: payload,\n                error: err\n              });\n              references.dispatch({\n                type: _type,\n                payload: payload,\n                error: err\n              });\n            };\n\n            var dispatchSuccess = function dispatchSuccess(result) {\n              references.dispatch({\n                type: successType,\n                payload: payload,\n                result: result\n              });\n              references.dispatch({\n                type: _type,\n                payload: payload,\n                result: result\n              });\n            };\n\n            references.dispatch({\n              type: startType,\n              payload: payload\n            });\n\n            try {\n              var result = references.dispatch(function () {\n                return thunkHandler(payload);\n              });\n\n              if (typeof result === 'object' && typeof result.then === 'function') {\n                return result.then(function (resolved) {\n                  dispatchSuccess(resolved);\n                  return resolved;\n                }).catch(function (err) {\n                  dispatchError(err);\n                  throw err;\n                });\n              }\n\n              dispatchSuccess(result);\n              return result;\n            } catch (err) {\n              dispatchError(err);\n              throw err;\n            }\n          };\n\n          _actionCreator.type = _type;\n          _actionCreator.startType = startType;\n          _actionCreator.successType = successType;\n          _actionCreator.failType = failType;\n          actionCreatorDict[_type] = _actionCreator;\n\n          if (value[thunkOnSymbol]) {\n            listenerDefinitions.push(value);\n            set(path, listenerActionCreators, _actionCreator);\n          } else {\n            set(path, actionCreators, _actionCreator);\n          }\n        } else if (value[computedSymbol]) {\n          var parent = get(parentPath, defaultState);\n          var computedMeta = value[computedSymbol];\n          var memoisedResultFn = memoizerific(1)(value);\n\n          var createComputedProperty = function createComputedProperty(o) {\n            Object.defineProperty(o, key, {\n              configurable: true,\n              enumerable: true,\n              get: function get$1() {\n                var storeState;\n\n                if (computedState.isInReducer) {\n                  storeState = computedState.currentState;\n                } else if (references.getState == null) {\n                  return undefined;\n                } else {\n                  try {\n                    storeState = references.getState();\n                  } catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                      console.warn('Invalid access attempt to a computed property');\n                    }\n\n                    return undefined;\n                  }\n                }\n\n                var state = get(parentPath, storeState);\n                var inputs = computedMeta.stateResolvers.map(function (resolver) {\n                  return resolver(state, storeState);\n                });\n                return memoisedResultFn.apply(void 0, inputs);\n              }\n            });\n          };\n\n          createComputedProperty(parent);\n          computedProperties.push({\n            key: key,\n            parentPath: parentPath,\n            createComputedProperty: createComputedProperty\n          });\n        } else if (value[reducerSymbol]) {\n          customReducers.push({\n            key: key,\n            parentPath: parentPath,\n            reducer: value\n          });\n        } else {\n          handleValueAsState();\n        }\n      } else if (isStateObject(value)) {\n        var existing = get(path, defaultState);\n\n        if (existing == null) {\n          set(path, defaultState, {});\n        }\n\n        recursiveExtractDefsFromModel(value, path);\n      } else {\n        handleValueAsState();\n      }\n    });\n  };\n\n  recursiveExtractDefsFromModel(model, []);\n  listenerDefinitions.forEach(function (listenerActionOrThunk) {\n    var listenerMeta = listenerActionOrThunk[actionOnSymbol] || listenerActionOrThunk[thunkOnSymbol];\n    var targets = listenerMeta.targetResolver(get(listenerMeta.parent, actionCreators), actionCreators);\n    var targetTypes = (Array.isArray(targets) ? targets : [targets]).reduce(function (acc, target) {\n      if (typeof target === 'function' && target.type && actionCreatorDict[target.type]) {\n        acc.push(target.type);\n      } else if (typeof target === 'string') {\n        acc.push(target);\n      }\n\n      return acc;\n    }, []);\n    listenerMeta.resolvedTargets = targetTypes;\n    targetTypes.forEach(function (targetType) {\n      var listenerReg = listenerActionMap[targetType] || [];\n      listenerReg.push(actionCreatorDict[listenerMeta.type]);\n      listenerActionMap[targetType] = listenerReg;\n    });\n  });\n\n  var createReducer = function createReducer() {\n    var runActionReducerAtPath = function runActionReducerAtPath(state, action, actionReducer, path) {\n      return simpleProduce(path, state, function (draft) {\n        return actionReducer(draft, action.payload);\n      });\n    };\n\n    var reducerForActions = function reducerForActions(state, action) {\n      var actionReducer = actionReducersDict[action.type];\n\n      if (actionReducer) {\n        var actionMeta = actionReducer[actionSymbol] || actionReducer[actionOnSymbol];\n        return runActionReducerAtPath(state, action, actionReducer, actionMeta.parent);\n      }\n\n      return state;\n    };\n\n    var reducerForCustomReducers = function reducerForCustomReducers(state, action) {\n      return customReducers.reduce(function (acc, _ref2) {\n        var parentPath = _ref2.parentPath,\n            key = _ref2.key,\n            red = _ref2.reducer;\n        return simpleProduce(parentPath, acc, function (draft) {\n          draft[key] = red(draft[key], action);\n          return draft;\n        });\n      }, state);\n    };\n\n    var rootReducer = function rootReducer(state, action) {\n      var stateAfterActions = reducerForActions(state, action);\n      var next = customReducers.length > 0 ? reducerForCustomReducers(stateAfterActions, action) : stateAfterActions;\n\n      if (state !== next) {\n        computedProperties.forEach(function (_ref3) {\n          var parentPath = _ref3.parentPath,\n              createComputedProperty = _ref3.createComputedProperty;\n          createComputedProperty(get(parentPath, next));\n        });\n      }\n\n      return next;\n    };\n\n    return rootReducer;\n  };\n\n  return {\n    actionCreatorDict: actionCreatorDict,\n    actionCreators: actionCreators,\n    computedProperties: computedProperties,\n    computedState: computedState,\n    defaultState: defaultState,\n    listenerActionCreators: listenerActionCreators,\n    listenerActionMap: listenerActionMap,\n    reducer: reducerEnhancer(createReducer())\n  };\n}\n\nfunction createStore(model, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      compose$1 = _options.compose,\n      _options$devTools = _options.devTools,\n      devTools = _options$devTools === void 0 ? true : _options$devTools,\n      _options$disableImmer = _options.disableImmer,\n      disableImmer = _options$disableImmer === void 0 ? false : _options$disableImmer,\n      _options$enhancers = _options.enhancers,\n      enhancers = _options$enhancers === void 0 ? [] : _options$enhancers,\n      _options$initialState = _options.initialState,\n      initialState = _options$initialState === void 0 ? {} : _options$initialState,\n      injections = _options.injections,\n      _options$middleware = _options.middleware,\n      middleware = _options$middleware === void 0 ? [] : _options$middleware,\n      _options$mockActions = _options.mockActions,\n      mockActions = _options$mockActions === void 0 ? false : _options$mockActions,\n      _options$name = _options.name,\n      storeName = _options$name === void 0 ? \"EasyPeasyStore\" : _options$name,\n      _options$reducerEnhan = _options.reducerEnhancer,\n      reducerEnhancer = _options$reducerEnhan === void 0 ? function (rootReducer) {\n    return rootReducer;\n  } : _options$reducerEnhan;\n\n  var bindReplaceState = function bindReplaceState(modelDef) {\n    return _extends({}, modelDef, {\n      easyPeasyReplaceState: action(function (state, payload) {\n        return payload;\n      })\n    });\n  };\n\n  var modelDefinition = bindReplaceState(model);\n  var mockedActions = [];\n  var references = {};\n\n  var bindStoreInternals = function bindStoreInternals(state) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    references.internals = createStoreInternals({\n      disableImmer: disableImmer,\n      initialState: state,\n      injections: injections,\n      model: modelDefinition,\n      reducerEnhancer: reducerEnhancer,\n      references: references\n    });\n  };\n\n  bindStoreInternals(initialState);\n\n  var listenerActionsMiddleware = function listenerActionsMiddleware() {\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n\n        if (action && references.internals.listenerActionMap[action.type] && references.internals.listenerActionMap[action.type].length > 0) {\n          var sourceAction = references.internals.actionCreatorDict[action.type];\n          references.internals.listenerActionMap[action.type].forEach(function (actionCreator) {\n            actionCreator({\n              type: sourceAction ? sourceAction.type : action.type,\n              payload: action.payload,\n              error: action.error,\n              result: action.result\n            });\n          });\n        }\n\n        return result;\n      };\n    };\n  };\n\n  var mockActionsMiddleware = function mockActionsMiddleware() {\n    return function () {\n      return function (action) {\n        if (action != null) {\n          mockedActions.push(action);\n        }\n\n        return undefined;\n      };\n    };\n  };\n\n  var computedPropertiesMiddleware = function computedPropertiesMiddleware(store) {\n    return function (next) {\n      return function (action) {\n        references.internals.computedState.currentState = store.getState();\n        references.internals.computedState.isInReducer = true;\n        return next(action);\n      };\n    };\n  };\n\n  var easyPeasyMiddleware = [computedPropertiesMiddleware, reduxThunk].concat(middleware, [listenerActionsMiddleware]);\n\n  if (mockActions) {\n    easyPeasyMiddleware.push(mockActionsMiddleware);\n  }\n\n  var composeEnhancers = compose$1 || (devTools && typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    name: storeName\n  }) : compose);\n  var store = createStore$1(references.internals.reducer, references.internals.defaultState, composeEnhancers.apply(void 0, [applyMiddleware.apply(void 0, easyPeasyMiddleware)].concat(enhancers)));\n  store.subscribe(function () {\n    references.internals.computedState.isInReducer = false;\n  });\n  references.dispatch = store.dispatch;\n  references.getState = store.getState;\n\n  var bindActionCreators = function bindActionCreators() {\n    Object.keys(store.dispatch).forEach(function (actionsKey) {\n      delete store.dispatch[actionsKey];\n    });\n    Object.keys(references.internals.actionCreators).forEach(function (key) {\n      store.dispatch[key] = references.internals.actionCreators[key];\n    });\n  };\n\n  bindActionCreators();\n\n  var rebindStore = function rebindStore(removeKey) {\n    var currentState = store.getState();\n\n    if (removeKey) {\n      delete currentState[removeKey];\n    }\n\n    bindStoreInternals(store.getState());\n    store.replaceReducer(references.internals.reducer);\n    references.internals.actionCreatorDict['@action.easyPeasyReplaceState'](references.internals.defaultState);\n    bindActionCreators();\n  };\n\n  return Object.assign(store, {\n    addModel: function addModel(key, modelForKey) {\n      if (modelDefinition[key] && process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\"easy-peasy: The store model already contains a model definition for \\\"\" + key + \"\\\"\");\n        store.removeModel(key);\n      }\n\n      modelDefinition[key] = modelForKey;\n      rebindStore();\n    },\n    clearMockedActions: function clearMockedActions() {\n      mockedActions = [];\n    },\n    getActions: function getActions() {\n      return references.internals.actionCreators;\n    },\n    getListeners: function getListeners() {\n      return references.internals.listenerActionCreators;\n    },\n    getMockedActions: function getMockedActions() {\n      return [].concat(mockedActions);\n    },\n    reconfigure: function reconfigure(newModel) {\n      modelDefinition = bindReplaceState(newModel);\n      rebindStore();\n    },\n    removeModel: function removeModel(key) {\n      if (!modelDefinition[key]) {\n        if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.warn(\"easy-peasy: The store model does not contain a model definition for \\\"\" + key + \"\\\"\");\n        }\n\n        return;\n      }\n\n      delete modelDefinition[key];\n      rebindStore(key);\n    }\n  });\n}\n/* eslint-disable react/prop-types */\n\n\nfunction createContextStore(model, config) {\n  var StoreContext = createContext();\n\n  function Provider(_ref) {\n    var children = _ref.children,\n        initialData = _ref.initialData;\n    var store = useMemo(function () {\n      return createStore(typeof model === 'function' ? model(initialData) : model, config);\n    }, []);\n    return React.createElement(StoreContext.Provider, {\n      value: store\n    }, children);\n  }\n\n  function useStore() {\n    return useContext(StoreContext);\n  }\n\n  return {\n    Provider: Provider,\n    useStore: useStore,\n    useStoreState: createStoreStateHook(StoreContext),\n    useStoreActions: createStoreActionsHook(StoreContext),\n    useStoreDispatch: createStoreDispatchHook(StoreContext)\n  };\n}\n/**\n * Some good references on the topic of reinitialisation:\n * - https://github.com/facebook/react/issues/14830\n */\n\n\nfunction createComponentStore(model, config) {\n  return function useLocalStore(initialData) {\n    var store = useMemo(function () {\n      return createStore(typeof model === 'function' ? model(initialData) : model, config);\n    }, []);\n    var previousStateRef = useRef(store.getState());\n\n    var _useState = useState(function () {\n      return store.getState();\n    }),\n        currentState = _useState[0],\n        setCurrentState = _useState[1];\n\n    useEffect(function () {\n      return store.subscribe(function () {\n        var nextState = store.getState();\n\n        if (previousStateRef.current !== nextState) {\n          previousStateRef.current = nextState;\n          setCurrentState(nextState);\n        }\n      });\n    }, [store]);\n    return [currentState, store.getActions()];\n  };\n}\n\nvar StoreProvider = function StoreProvider(_ref) {\n  var children = _ref.children,\n      store = _ref.store;\n  return React.createElement(StoreContext.Provider, {\n    value: store\n  }, children);\n};\n/**\n * The auto freeze feature of immer doesn't seem to work in our testing. We have\n * explicitly disabled it to avoid perf issues.\n */\n\n\nsetAutoFreeze(false);\nexport { StoreProvider, action, actionOn, computed, createComponentStore, createContextStore, createStore, createTypedHooks, debug, memo, reducer, thunk, thunkOn, useStore, useStoreActions, useStoreDispatch, useStoreState };","map":null,"metadata":{},"sourceType":"module"}