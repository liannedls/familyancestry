{"ast":null,"code":"import byParents from '../children/byParents';\nimport getSpouses from '../utils/getSpouses';\nimport fixOverlaps from './fixOverlaps';\nimport { prop, withType, flat, hasDiffParents } from '../utils';\nexport default (store => {\n  let families = [];\n  const createFamily = byParents(store);\n\n  if (hasDiffParents(store.rootNode)) {\n    const bloodParentIDs = store.rootNode.parents.filter(withType('blood')).map(prop('id'));\n    const adoptedParentIDs = store.rootNode.parents.filter(withType('adopted')).map(prop('id'));\n    const bloodFamily = createFamily(bloodParentIDs, 'root', true);\n    const adoptedFamily = createFamily(adoptedParentIDs);\n    fixOverlaps(bloodFamily, adoptedFamily);\n    families = [bloodFamily, adoptedFamily];\n  } else {\n    const parentIDs = store.rootNode.parents.map(prop('id'));\n    const mainFamily = createFamily(parentIDs, 'root', true);\n    families.push(mainFamily);\n    const parents = mainFamily.pUnits.map(prop('nodes')).reduce(flat);\n\n    if (parents.length === 2) {\n      const _getSpouses = getSpouses(store, parents),\n            left = _getSpouses.left,\n            right = _getSpouses.right;\n\n      families = [...left.map(node => createFamily([node.id])), ...families, ...right.map(node => createFamily([node.id]))];\n    }\n  }\n\n  if (families.length > 1) {\n    for (let i = 1; i < families.length; i++) {\n      families[i].left = families[i - 1].right;\n    }\n  }\n\n  families.forEach(family => store.families.set(family.id, family));\n  return store;\n});","map":null,"metadata":{},"sourceType":"module"}