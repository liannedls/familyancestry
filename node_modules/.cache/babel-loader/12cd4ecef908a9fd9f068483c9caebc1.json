{"ast":null,"code":"import { withId } from './utils';\nconst ERROR_PREFIX = '[relatives-tree::store]:';\n\nconst mapNode = node => [node.id, Object.assign({}, node)];\n\nclass Store {\n  constructor(nodes, rootId) {\n    if (!nodes.find(withId(rootId))) {\n      throw new Error(`${ERROR_PREFIX} Can't find a root node with ID: ${rootId}`);\n    }\n\n    this.nextId = 0;\n    this.families = new Map();\n    this.nodes = new Map(nodes.map(mapNode));\n    this.rootNode = this.nodes.get(rootId);\n    this.gender = this.rootNode.gender;\n  }\n\n  getNextId() {\n    return ++this.nextId;\n  }\n\n  getNode(id) {\n    return this.nodes.get(id);\n  }\n\n  getNodes(ids) {\n    return ids.map(this.getNode.bind(this));\n  }\n\n  getFamily(id) {\n    return this.families.get(id);\n  }\n\n  get familiesArray() {\n    return [...this.families.values()];\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["../src/store.ts"],"names":[],"mappings":"AACA,SAAS,MAAT,QAAuB,SAAvB;AAGA,MAAM,YAAY,GAAG,0BAArB;;AAEA,MAAM,OAAO,GAAI,IAAD,IAA8C,CAAC,IAAI,CAAC,EAAN,EAAQ,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,IAAP,CAAR,CAA9D;;AAEA,MAAM,KAAN,CAAW;AAST,EAAA,WAAA,CAAY,KAAZ,EAAkC,MAAlC,EAAgD;AAC9C,QAAI,CAAC,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,MAAD,CAAjB,CAAL,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CAAU,GAAG,YAAY,oCAAoC,MAAM,EAAnE,CAAN;AACD;;AAED,SAAK,MAAL,GAAc,CAAd;AACA,SAAK,QAAL,GAAgB,IAAI,GAAJ,EAAhB;AACA,SAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ,KAAK,CAAC,GAAN,CAAU,OAAV,CAAR,CAAb;AAEA,SAAK,QAAL,GAAiB,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,CAAjB;AACA,SAAK,MAAL,GAAc,KAAK,QAAL,CAAc,MAA5B;AACD;;AAED,EAAA,SAAS,GAAA;AAAa,WAAO,EAAE,KAAK,MAAd;AAAuB;;AAE7C,EAAA,OAAO,CAAC,EAAD,EAAW;AAAiB,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,EAAf,CAAP;AAA2C;;AAC9E,EAAA,QAAQ,CAAC,GAAD,EAAc;AAAmB,WAAO,GAAG,CAAC,GAAJ,CAAQ,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAR,CAAP;AAA0C;;AACnF,EAAA,SAAS,CAAC,EAAD,EAAW;AAAY,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,EAAlB,CAAP;AAAyC;;AAEzE,MAAI,aAAJ,GAAiB;AAAe,WAAO,CAAC,GAAG,KAAK,QAAL,CAAc,MAAd,EAAJ,CAAP;AAAoC;;AA5B3D;;AAgCX,eAAe,KAAf","sourceRoot":"","sourcesContent":["import { withId } from './utils';\nconst ERROR_PREFIX = '[relatives-tree::store]:';\nconst mapNode = (node) => [node.id, Object.assign({}, node)];\nclass Store {\n    constructor(nodes, rootId) {\n        if (!nodes.find(withId(rootId))) {\n            throw new Error(`${ERROR_PREFIX} Can't find a root node with ID: ${rootId}`);\n        }\n        this.nextId = 0;\n        this.families = new Map();\n        this.nodes = new Map(nodes.map(mapNode));\n        this.rootNode = this.nodes.get(rootId);\n        this.gender = this.rootNode.gender;\n    }\n    getNextId() { return ++this.nextId; }\n    getNode(id) { return this.nodes.get(id); }\n    getNodes(ids) { return ids.map(this.getNode.bind(this)); }\n    getFamily(id) { return this.families.get(id); }\n    get familiesArray() { return [...this.families.values()]; }\n}\nexport default Store;\n//# sourceMappingURL=store.js.map"]},"metadata":{},"sourceType":"module"}