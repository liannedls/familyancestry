{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lianne\\\\mygit\\\\familyancestry\\\\src\\\\frontend\\\\Tree.jsx\";\nimport React, { Component } from 'react';\nimport LineTo from 'react-lineto';\nimport { Collapse } from 'reactstrap';\nimport treeData from '../familytree.json';\n\nclass Tree extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"tree\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\ndTree.init(treeData, {\n  target: \"#graph\",\n  debug: true,\n  height: 800,\n  width: 1200,\n  callbacks: {\n    nodeClick: function (name, extra) {\n      console.log(name);\n    },\n    textRenderer: function (name, extra, textClass) {\n      // THis callback is optinal but can be used to customize\n      // how the text is rendered without having to rewrite the entire node\n      // from screatch.\n      if (extra && extra.nickname) name = name + \" (\" + extra.nickname + \")\";\n      return \"<p align='center' class='\" + textClass + \"'>\" + name + \"</p>\";\n    },\n    nodeRenderer: function (name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n      // This callback is optional but can be used to customize the\n      // node element using HTML.\n      let node = '';\n      node += '<div ';\n      node += 'style=\"height:100%;width:100%;\" ';\n      node += 'class=\"' + nodeClass + '\" ';\n      node += 'id=\"node' + id + '\">\\n';\n      node += textRenderer(name, extra, textClass);\n      node += '</div>';\n      return node;\n    }\n  }\n});\nexport default Tree;","map":{"version":3,"sources":["C:/Users/lianne/mygit/familyancestry/src/frontend/Tree.jsx"],"names":["React","Component","LineTo","Collapse","treeData","Tree","render","dTree","init","target","debug","height","width","callbacks","nodeClick","name","extra","console","log","textRenderer","textClass","nickname","nodeRenderer","x","y","id","nodeClass","node"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAE3BK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,EAAE,EAAG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAR0B;;AAW7BC,KAAK,CAACC,IAAN,CAAWJ,QAAX,EAAqB;AACnBK,EAAAA,MAAM,EAAE,QADW;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,MAAM,EAAE,GAHW;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE,UAASC,IAAT,EAAeC,KAAf,EAAsB;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,KAHQ;AAITI,IAAAA,YAAY,EAAE,UAASJ,IAAT,EAAeC,KAAf,EAAsBI,SAAtB,EAAiC;AAC9C;AACC;AACA;AACD,UAAIJ,KAAK,IAAIA,KAAK,CAACK,QAAnB,EACEN,IAAI,GAAGA,IAAI,GAAG,IAAP,GAAcC,KAAK,CAACK,QAApB,GAA+B,GAAtC;AACF,aAAO,8BAA8BD,SAA9B,GAA0C,IAA1C,GAAiDL,IAAjD,GAAwD,MAA/D;AACA,KAXQ;AAYTO,IAAAA,YAAY,EAAE,UAASP,IAAT,EAAeQ,CAAf,EAAkBC,CAAlB,EAAqBb,MAArB,EAA6BC,KAA7B,EAAoCI,KAApC,EAA2CS,EAA3C,EAA+CC,SAA/C,EAA0DN,SAA1D,EAAqED,YAArE,EAAmF;AAC/F;AACA;AACA,UAAIQ,IAAI,GAAG,EAAX;AACAA,MAAAA,IAAI,IAAI,OAAR;AACAA,MAAAA,IAAI,IAAI,kCAAR;AACAA,MAAAA,IAAI,IAAI,YAAYD,SAAZ,GAAwB,IAAhC;AACAC,MAAAA,IAAI,IAAI,aAAaF,EAAb,GAAkB,MAA1B;AACAE,MAAAA,IAAI,IAAIR,YAAY,CAACJ,IAAD,EAAOC,KAAP,EAAcI,SAAd,CAApB;AACAO,MAAAA,IAAI,IAAI,QAAR;AACA,aAAOA,IAAP;AACH;AAvBU;AALQ,CAArB;AAgCA,eAAetB,IAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport LineTo from 'react-lineto';\r\nimport { Collapse } from 'reactstrap';\r\nimport treeData from '../familytree.json';\r\n\r\nclass Tree extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id = \"tree\">\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\ndTree.init(treeData, {\r\n  target: \"#graph\",\r\n  debug: true,\r\n  height: 800,\r\n  width: 1200,\r\n  callbacks: {\r\n    nodeClick: function(name, extra) {\r\n      console.log(name);\r\n    },\r\n    textRenderer: function(name, extra, textClass) {\r\n    \t// THis callback is optinal but can be used to customize\r\n      // how the text is rendered without having to rewrite the entire node\r\n      // from screatch.\r\n    \tif (extra && extra.nickname)\r\n      \tname = name + \" (\" + extra.nickname + \")\";\r\n    \treturn \"<p align='center' class='\" + textClass + \"'>\" + name + \"</p>\";\r\n    },\r\n    nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n      // This callback is optional but can be used to customize the\r\n      // node element using HTML.\r\n      let node = '';\r\n      node += '<div ';\r\n      node += 'style=\"height:100%;width:100%;\" ';\r\n      node += 'class=\"' + nodeClass + '\" ';\r\n      node += 'id=\"node' + id + '\">\\n';\r\n      node += textRenderer(name, extra, textClass);\r\n      node += '</div>';\r\n      return node;\r\n  }\r\n  }\r\n});\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}