{"ast":null,"code":"import { withId } from './utils';\nconst ERROR_PREFIX = '[relatives-tree::store]:';\n\nconst mapNode = node => [node.id, Object.assign({}, node)];\n\nclass Store {\n  constructor(nodes, rootId) {\n    if (!nodes.find(withId(rootId))) {\n      throw new Error(\"\".concat(ERROR_PREFIX, \" Can't find a root node with ID: \").concat(rootId));\n    }\n\n    this.nextId = 0;\n    this.families = new Map();\n    this.nodes = new Map(nodes.map(mapNode));\n    this.rootNode = this.nodes.get(rootId);\n    this.gender = this.rootNode.gender;\n  }\n\n  getNextId() {\n    return ++this.nextId;\n  }\n\n  getNode(id) {\n    return this.nodes.get(id);\n  }\n\n  getNodes(ids) {\n    return ids.map(this.getNode.bind(this));\n  }\n\n  getFamily(id) {\n    return this.families.get(id);\n  }\n\n  get familiesArray() {\n    return [...this.families.values()];\n  }\n\n}\n\nexport default Store;","map":null,"metadata":{},"sourceType":"module"}