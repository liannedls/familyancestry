{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\lianne\\\\mygit\\\\familyancestry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport hasHiddenRelatives from './hasHiddenRelatives';\nimport { flat } from './index';\nvar PARENTS = ['root', 'parent'];\nvar CHILDREN = ['root', 'child'];\n\nvar extendNode = function extendNode(family) {\n  return function (unit) {\n    return unit.nodes.map(function (node, idx) {\n      return Object.assign({}, node, {\n        top: family.top + (unit.isChild ? 2 : 0),\n        left: family.left + unit.shift + idx * 2,\n        hasSubTree: hasHiddenRelatives(family, node)\n      });\n    });\n  };\n};\n\nvar getParentNodes = function getParentNodes(family) {\n  return (~PARENTS.indexOf(family.type) ? family.pUnits : []).map(extendNode(family));\n};\n\nvar getChildNodes = function getChildNodes(family) {\n  return (~CHILDREN.indexOf(family.type) ? family.cUnits : []).map(extendNode(family));\n};\n\nvar mapFamily = function mapFamily(family) {\n  return [].concat(_toConsumableArray(getParentNodes(family)), _toConsumableArray(getChildNodes(family))).reduce(flat);\n};\n\nexport default (function (families) {\n  return families.map(mapFamily).reduce(flat);\n});","map":{"version":3,"sources":["../../src/utils/getExtendedNodes.ts"],"names":[],"mappings":";AAAA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,SAAS,IAAT,QAAqB,SAArB;AAKA,IAAM,OAAO,GAAG,CAAC,MAAD,EAAS,QAAT,CAAhB;AACA,IAAM,QAAQ,GAAG,CAAC,MAAD,EAAS,OAAT,CAAjB;;AAEA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,MAAD;AAAA,SAAoB,UAAC,IAAD;AAAA,WACrC,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,UAAC,IAAD,EAAoB,GAApB;AAAA,aAAoC,MAAA,CAAA,MAAA,CAAA,EAAA,EAC9C,IAD8C,EAC1C;AACP,QAAA,GAAG,EAAE,MAAM,CAAC,GAAP,IAAc,IAAI,CAAC,OAAL,GAAe,CAAf,GAAmB,CAAjC,CADE;AAEP,QAAA,IAAI,EAAE,MAAM,CAAC,IAAP,GAAc,IAAI,CAAC,KAAnB,GAA4B,GAAG,GAAG,CAFjC;AAGP,QAAA,UAAU,EAAE,kBAAkB,CAAC,MAAD,EAAS,IAAT;AAHvB,OAD0C,CAApC;AAAA,KAAf,CADqC;AAAA,GAApB;AAAA,CAAnB;;AASA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,MAAD;AAAA,SACrB,CAAC,CAAC,OAAO,CAAC,OAAR,CAAgB,MAAM,CAAC,IAAvB,CAAD,GAAgC,MAAM,CAAC,MAAvC,GAAgD,EAAjD,EAAqD,GAArD,CAAyD,UAAU,CAAC,MAAD,CAAnE,CADqB;AAAA,CAAvB;;AAGA,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,MAAD;AAAA,SACpB,CAAC,CAAC,QAAQ,CAAC,OAAT,CAAiB,MAAM,CAAC,IAAxB,CAAD,GAAiC,MAAM,CAAC,MAAxC,GAAiD,EAAlD,EAAsD,GAAtD,CAA0D,UAAU,CAAC,MAAD,CAApE,CADoB;AAAA,CAAtB;;AAGA,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,MAAD;AAAA,SAChB,6BAAI,cAAc,CAAC,MAAD,CAAlB,sBAA+B,aAAa,CAAC,MAAD,CAA5C,GAAsD,MAAtD,CAA6D,IAA7D,CADgB;AAAA,CAAlB;;AAGA,gBAAe,UAAC,QAAD;AAAA,SACb,QAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,MAAxB,CAA+B,IAA/B,CADa;AAAA,CAAf","sourceRoot":"","sourcesContent":["import hasHiddenRelatives from './hasHiddenRelatives';\nimport { flat } from './index';\nconst PARENTS = ['root', 'parent'];\nconst CHILDREN = ['root', 'child'];\nconst extendNode = (family) => (unit) => (unit.nodes.map((node, idx) => (Object.assign({}, node, { top: family.top + (unit.isChild ? 2 : 0), left: family.left + unit.shift + (idx * 2), hasSubTree: hasHiddenRelatives(family, node) }))));\nconst getParentNodes = (family) => (~PARENTS.indexOf(family.type) ? family.pUnits : []).map(extendNode(family));\nconst getChildNodes = (family) => (~CHILDREN.indexOf(family.type) ? family.cUnits : []).map(extendNode(family));\nconst mapFamily = (family) => [...getParentNodes(family), ...getChildNodes(family)].reduce(flat);\nexport default (families) => families.map(mapFamily).reduce(flat);\n//# sourceMappingURL=getExtendedNodes.js.map"]},"metadata":{},"sourceType":"module"}