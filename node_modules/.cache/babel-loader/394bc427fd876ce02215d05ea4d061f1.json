{"ast":null,"code":"import { prop, withType, relToNode } from './index';\nexport default ((store, parents) => {\n  const middle = [...parents];\n\n  if (middle.length === 1) {\n    let spouse;\n    const parent = middle[0];\n    const married = parent.spouses.find(withType('married'));\n\n    if (married) {\n      spouse = store.getNode(married.id);\n    } else if (parent.spouses.length === 1) {\n      spouse = store.getNode(parent.spouses[0].id);\n    } else if (parent.spouses.length > 1) {\n      spouse = parent.spouses.map(relToNode(store)).sort((a, b) => b.children.length - a.children.length)[0];\n    }\n\n    if (spouse) {\n      parent.gender === store.gender ? middle.push(spouse) : middle.unshift(spouse);\n    }\n  }\n\n  const result = {\n    left: [],\n    middle,\n    right: []\n  };\n\n  if (middle.length === 2) {\n    const middleIds = result.middle.map(prop('id'));\n    result.left = middle[0].spouses.filter(rel => middleIds.indexOf(rel.id) === -1).sort(a => a.type === 'married' ? 1 : 0).map(relToNode(store));\n    result.right = middle[1].spouses.filter(rel => middleIds.indexOf(rel.id) === -1).sort(a => a.type === 'married' ? -1 : 0).map(relToNode(store));\n  }\n\n  return result;\n});","map":{"version":3,"sources":["../../src/utils/getSpouses.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,EAAe,QAAf,EAAyB,SAAzB,QAA0C,SAA1C;AASA,gBAAe,CAAC,KAAD,EAAe,OAAf,KAAuD;AACpE,QAAM,MAAM,GAAG,CAAC,GAAG,OAAJ,CAAf;;AAEA,MAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,QAAI,MAAJ;AAEA,UAAM,MAAM,GAAG,MAAM,CAAC,CAAD,CAArB;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,QAAQ,CAAC,SAAD,CAA5B,CAAhB;;AAEA,QAAI,OAAJ,EAAa;AACX,MAAA,MAAM,GAAG,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,EAAtB,CAAT;AACD,KAFD,MAEO,IAAI,MAAM,CAAC,OAAP,CAAe,MAAf,KAA0B,CAA9B,EAAiC;AACtC,MAAA,MAAM,GAAG,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,OAAP,CAAe,CAAf,EAAkB,EAAhC,CAAT;AACD,KAFM,MAEA,IAAI,MAAM,CAAC,OAAP,CAAe,MAAf,GAAwB,CAA5B,EAA+B;AACpC,MAAA,MAAM,GACJ,MAAM,CAAC,OAAP,CACG,GADH,CACO,SAAS,CAAC,KAAD,CADhB,EAEG,IAFH,CAEQ,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,QAAF,CAAW,MAAX,GAAoB,CAAC,CAAC,QAAF,CAAW,MAFjD,CADO,CAIP,CAJO,CAAT;AAKD;;AAED,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,MAAP,KAAkB,KAAK,CAAC,MAAxB,GACI,MAAM,CAAC,IAAP,CAAY,MAAZ,CADJ,GAEI,MAAM,CAAC,OAAP,CAAe,MAAf,CAFJ;AAGD;AACF;;AAED,QAAM,MAAM,GAAiB;AAAE,IAAA,IAAI,EAAE,EAAR;AAAY,IAAA,MAAZ;AAAoB,IAAA,KAAK,EAAE;AAA3B,GAA7B;;AAEA,MAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,IAAI,CAAC,IAAD,CAAtB,CAAlB;AAEA,IAAA,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,CAAD,CAAN,CAAU,OAAV,CACX,MADW,CACJ,GAAG,IAAI,SAAS,CAAC,OAAV,CAAkB,GAAG,CAAC,EAAtB,MAA8B,CAAC,CADlC,EAEX,IAFW,CAEL,CAAD,IAAO,CAAC,CAAC,IAAF,KAAW,SAAX,GAAuB,CAAvB,GAA2B,CAF5B,EAGX,GAHW,CAGP,SAAS,CAAC,KAAD,CAHF,CAAd;AAKA,IAAA,MAAM,CAAC,KAAP,GAAe,MAAM,CAAC,CAAD,CAAN,CAAU,OAAV,CACZ,MADY,CACL,GAAG,IAAI,SAAS,CAAC,OAAV,CAAkB,GAAG,CAAC,EAAtB,MAA8B,CAAC,CADjC,EAEZ,IAFY,CAEN,CAAD,IAAO,CAAC,CAAC,IAAF,KAAW,SAAX,GAAuB,CAAC,CAAxB,GAA4B,CAF5B,EAGZ,GAHY,CAGR,SAAS,CAAC,KAAD,CAHD,CAAf;AAID;;AAED,SAAO,MAAP;AACD,CA7CD","sourceRoot":"","sourcesContent":["import { prop, withType, relToNode } from './index';\nexport default (store, parents) => {\n    const middle = [...parents];\n    if (middle.length === 1) {\n        let spouse;\n        const parent = middle[0];\n        const married = parent.spouses.find(withType('married'));\n        if (married) {\n            spouse = store.getNode(married.id);\n        }\n        else if (parent.spouses.length === 1) {\n            spouse = store.getNode(parent.spouses[0].id);\n        }\n        else if (parent.spouses.length > 1) {\n            spouse = (parent.spouses\n                .map(relToNode(store))\n                .sort((a, b) => b.children.length - a.children.length))[0];\n        }\n        if (spouse) {\n            parent.gender === store.gender\n                ? middle.push(spouse)\n                : middle.unshift(spouse);\n        }\n    }\n    const result = { left: [], middle, right: [] };\n    if (middle.length === 2) {\n        const middleIds = result.middle.map(prop('id'));\n        result.left = middle[0].spouses\n            .filter(rel => middleIds.indexOf(rel.id) === -1)\n            .sort((a) => a.type === 'married' ? 1 : 0)\n            .map(relToNode(store));\n        result.right = middle[1].spouses\n            .filter(rel => middleIds.indexOf(rel.id) === -1)\n            .sort((a) => a.type === 'married' ? -1 : 0)\n            .map(relToNode(store));\n    }\n    return result;\n};\n//# sourceMappingURL=getSpouses.js.map"]},"metadata":{},"sourceType":"module"}