{"ast":null,"code":"import { withSameIDs } from '../utils';\nexport default (store => {\n  return function (family) {\n    if (family.cID === null) return;\n    let right = 0;\n\n    while (family) {\n      const fUnit = family.cUnits[0];\n\n      if (family.pUnits.length === 2 && family.pCount > 2) {\n        fUnit.shift = Math.floor(family.pUnits[1].shift / 2);\n      }\n\n      const shift = fUnit.shift;\n      right = Math.max(right, family.right);\n      const cFamily = store.getFamily(family.cID);\n\n      if (cFamily.cID === null) {\n        fUnit.shift = (family.width - fUnit.size * 2) / 2;\n        break;\n      }\n\n      const pUnit = cFamily.pUnits.find(withSameIDs(fUnit));\n      const uIndex = cFamily.pUnits.findIndex(unit => unit.nodes[0].id === fUnit.nodes[0].id);\n\n      if (uIndex === 0 && pUnit.shift === 0) {\n        const left = family.left + shift;\n        cFamily.left = Math.max(cFamily.left, left);\n      } else {\n        pUnit.shift = family.left + fUnit.shift - cFamily.left;\n      }\n\n      const next = cFamily.pUnits[uIndex + 1];\n\n      if (next) {\n        const diff = right - (cFamily.left + next.shift);\n\n        if (diff > 0) {\n          for (let i = uIndex + 1; i < cFamily.pUnits.length; i++) {\n            cFamily.pUnits[i].shift += diff;\n          }\n        }\n      }\n\n      family = cFamily;\n    }\n  };\n});","map":{"version":3,"sources":["../../src/parents/arrange.ts"],"names":[],"mappings":"AAGA,SAAS,WAAT,QAA4B,UAA5B;AAEA,gBAAgB,KAAD,IAAiB;AAC9B,SAAO,UAAU,MAAV,EAAwB;AAC7B,QAAI,MAAM,CAAC,GAAP,KAAe,IAAnB,EAAyB;AACzB,QAAI,KAAK,GAAG,CAAZ;;AAEA,WAAO,MAAP,EAAe;AACb,YAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,CAAd,CAAd;;AAEA,UAAI,MAAM,CAAC,MAAP,CAAc,MAAd,KAAyB,CAAzB,IAA8B,MAAM,CAAC,MAAP,GAAgB,CAAlD,EAAqD;AACnD,QAAA,KAAK,CAAC,KAAN,GAAc,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,KAAjB,GAAyB,CAApC,CAAd;AACD;;AAED,YAAM,KAAK,GAAG,KAAK,CAAC,KAApB;AACA,MAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,MAAM,CAAC,KAAvB,CAAR;AAEA,YAAM,OAAO,GAAG,KAAK,CAAC,SAAN,CAAgB,MAAM,CAAC,GAAvB,CAAhB;;AAGA,UAAI,OAAO,CAAC,GAAR,KAAgB,IAApB,EAA0B;AACxB,QAAA,KAAK,CAAC,KAAN,GAAc,CAAC,MAAM,CAAC,KAAP,GAAe,KAAK,CAAC,IAAN,GAAa,CAA7B,IAAkC,CAAhD;AACA;AACD;;AAED,YAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,IAAf,CAAoB,WAAW,CAAC,KAAD,CAA/B,CAAd;AACA,YAAM,MAAM,GAAG,OAAO,CAAC,MAAR,CAAe,SAAf,CAAyB,IAAI,IAC1C,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,EAAd,KAAqB,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,EADvB,CAAf;;AAIA,UAAI,MAAM,KAAK,CAAX,IAAgB,KAAK,CAAC,KAAN,KAAgB,CAApC,EAAuC;AACrC,cAAM,IAAI,GAAG,MAAM,CAAC,IAAP,GAAc,KAA3B;AACA,QAAA,OAAO,CAAC,IAAR,GAAe,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,IAAvB,CAAf;AACD,OAHD,MAGO;AACL,QAAA,KAAK,CAAC,KAAN,GAAc,MAAM,CAAC,IAAP,GAAc,KAAK,CAAC,KAApB,GAA4B,OAAO,CAAC,IAAlD;AACD;;AAED,YAAM,IAAI,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,GAAG,CAAxB,CAAb;;AAEA,UAAI,IAAJ,EAAU;AACR,cAAM,IAAI,GAAG,KAAK,IAAI,OAAO,CAAC,IAAR,GAAe,IAAI,CAAC,KAAxB,CAAlB;;AAEA,YAAI,IAAI,GAAG,CAAX,EAAc;AACZ,eAAK,IAAI,CAAC,GAAG,MAAM,GAAG,CAAtB,EAAyB,CAAC,GAAG,OAAO,CAAC,MAAR,CAAe,MAA5C,EAAoD,CAAC,EAArD,EAAyD;AACvD,YAAA,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,KAAlB,IAA2B,IAA3B;AACD;AACF;AACF;;AAED,MAAA,MAAM,GAAG,OAAT;AACD;AACF,GAhDD;AAiDD,CAlDD","sourceRoot":"","sourcesContent":["import { withSameIDs } from '../utils';\nexport default (store) => {\n    return function (family) {\n        if (family.cID === null)\n            return;\n        let right = 0;\n        while (family) {\n            const fUnit = family.cUnits[0];\n            if (family.pUnits.length === 2 && family.pCount > 2) {\n                fUnit.shift = Math.floor(family.pUnits[1].shift / 2);\n            }\n            const shift = fUnit.shift;\n            right = Math.max(right, family.right);\n            const cFamily = store.getFamily(family.cID);\n            if (cFamily.cID === null) {\n                fUnit.shift = (family.width - fUnit.size * 2) / 2;\n                break;\n            }\n            const pUnit = cFamily.pUnits.find(withSameIDs(fUnit));\n            const uIndex = cFamily.pUnits.findIndex(unit => (unit.nodes[0].id === fUnit.nodes[0].id));\n            if (uIndex === 0 && pUnit.shift === 0) {\n                const left = family.left + shift;\n                cFamily.left = Math.max(cFamily.left, left);\n            }\n            else {\n                pUnit.shift = family.left + fUnit.shift - cFamily.left;\n            }\n            const next = cFamily.pUnits[uIndex + 1];\n            if (next) {\n                const diff = right - (cFamily.left + next.shift);\n                if (diff > 0) {\n                    for (let i = uIndex + 1; i < cFamily.pUnits.length; i++) {\n                        cFamily.pUnits[i].shift += diff;\n                    }\n                }\n            }\n            family = cFamily;\n        }\n    };\n};\n//# sourceMappingURL=arrange.js.map"]},"metadata":{},"sourceType":"module"}