{"ast":null,"code":"import arrangeMiddle from '../middle/arrange';\nimport { withId, withType, withSameIDs } from '../utils';\nexport default (store => {\n  return function (family) {\n    if (family.pID === null) return;\n    let right = 0;\n\n    while (family) {\n      const fUnit = family.pUnits[0];\n      const shift = fUnit.shift;\n      right = Math.max(right, family.right);\n      const pFamily = store.getFamily(family.pID);\n      const cUnit = pFamily.cUnits.find(withSameIDs(fUnit));\n      const uIndex = pFamily.cUnits.findIndex(unit => unit.nodes[0].id === fUnit.nodes[0].id);\n\n      if (uIndex === 0) {\n        const left = family.left + shift - cUnit.shift;\n        pFamily.left = Math.max(pFamily.left, left);\n      } else {\n        cUnit.shift = family.left + fUnit.shift - pFamily.left;\n      }\n\n      const next = pFamily.cUnits[uIndex + 1];\n\n      if (next) {\n        const diff = right - (pFamily.left + next.shift);\n\n        for (let i = uIndex + 1; i < pFamily.cUnits.length; i++) {\n          pFamily.cUnits[i].shift += diff;\n        }\n      }\n\n      const ppUnit = pFamily.pUnits[0];\n\n      if (ppUnit) {\n        const size = pFamily.width;\n        ppUnit.shift = Math.floor((size - 2 * ppUnit.size) / 2);\n      }\n\n      if (pFamily.pID === null) {\n        const rootFamily = store.familiesArray.filter(withType('root'));\n        const start = rootFamily.findIndex(withId(pFamily.id));\n        arrangeMiddle(rootFamily, start + 1, family.right);\n        break;\n      }\n\n      family = pFamily;\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}