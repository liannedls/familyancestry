{"ast":null,"code":"import byParents from '../children/byParents';\nimport getSpouses from '../utils/getSpouses';\nimport fixOverlaps from './fixOverlaps';\nimport { prop, withType, flat, hasDiffParents } from '../utils';\nexport default (store => {\n  let families = [];\n  const createFamily = byParents(store);\n\n  if (hasDiffParents(store.rootNode)) {\n    const bloodParentIDs = store.rootNode.parents.filter(withType('blood')).map(prop('id'));\n    const adoptedParentIDs = store.rootNode.parents.filter(withType('adopted')).map(prop('id'));\n    const bloodFamily = createFamily(bloodParentIDs, 'root', true);\n    const adoptedFamily = createFamily(adoptedParentIDs);\n    fixOverlaps(bloodFamily, adoptedFamily);\n    families = [bloodFamily, adoptedFamily];\n  } else {\n    const parentIDs = store.rootNode.parents.map(prop('id'));\n    const mainFamily = createFamily(parentIDs, 'root', true);\n    families.push(mainFamily);\n    const parents = mainFamily.pUnits.map(prop('nodes')).reduce(flat);\n\n    if (parents.length === 2) {\n      const {\n        left,\n        right\n      } = getSpouses(store, parents);\n      families = [...left.map(node => createFamily([node.id])), ...families, ...right.map(node => createFamily([node.id]))];\n    }\n  }\n\n  if (families.length > 1) {\n    for (let i = 1; i < families.length; i++) {\n      families[i].left = families[i - 1].right;\n    }\n  }\n\n  families.forEach(family => store.families.set(family.id, family));\n  return store;\n});","map":{"version":3,"sources":["../../src/middle/create.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,uBAAtB;AACA,OAAO,UAAP,MAAuB,qBAAvB;AACA,OAAO,WAAP,MAAwB,eAAxB;AACA,SAAS,IAAT,EAAe,QAAf,EAAyB,IAAzB,EAA+B,cAA/B,QAAqD,UAArD;AAIA,gBAAgB,KAAD,IAAwB;AACrC,MAAI,QAAQ,GAAa,EAAzB;AACA,QAAM,YAAY,GAAG,SAAS,CAAC,KAAD,CAA9B;;AAEA,MAAI,cAAc,CAAC,KAAK,CAAC,QAAP,CAAlB,EAAoC;AAGlC,UAAM,cAAc,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CACpB,MADoB,CACb,QAAQ,CAAC,OAAD,CADK,EAEpB,GAFoB,CAEhB,IAAI,CAAC,IAAD,CAFY,CAAvB;AAIA,UAAM,gBAAgB,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CACtB,MADsB,CACf,QAAQ,CAAC,SAAD,CADO,EAEtB,GAFsB,CAElB,IAAI,CAAC,IAAD,CAFc,CAAzB;AAIA,UAAM,WAAW,GAAG,YAAY,CAAC,cAAD,EAAiB,MAAjB,EAAyB,IAAzB,CAAhC;AACA,UAAM,aAAa,GAAG,YAAY,CAAC,gBAAD,CAAlC;AAEA,IAAA,WAAW,CAAC,WAAD,EAAc,aAAd,CAAX;AACA,IAAA,QAAQ,GAAG,CAAC,WAAD,EAAc,aAAd,CAAX;AACD,GAhBD,MAgBO;AAEL,UAAM,SAAS,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,GAAvB,CAA2B,IAAI,CAAC,IAAD,CAA/B,CAAlB;AACA,UAAM,UAAU,GAAG,YAAY,CAAC,SAAD,EAAY,MAAZ,EAAoB,IAApB,CAA/B;AAEA,IAAA,QAAQ,CAAC,IAAT,CAAc,UAAd;AAEA,UAAM,OAAO,GAAG,UAAU,CAAC,MAAX,CACb,GADa,CACT,IAAI,CAAC,OAAD,CADK,EAEb,MAFa,CAEN,IAFM,CAAhB;;AAIA,QAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,UAAkB,UAAU,CAAC,KAAD,EAAQ,OAAR,CAAlC;AACA,MAAA,QAAQ,GAAG,CACT,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,EAAN,CAAD,CAA7B,CADM,EAET,GAAG,QAFM,EAGT,GAAG,KAAK,CAAC,GAAN,CAAU,IAAI,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,EAAN,CAAD,CAA9B,CAHM,CAAX;AAKD;AACF;;AAED,MAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,MAAA,QAAQ,CAAC,CAAD,CAAR,CAAY,IAAZ,GAAmB,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAR,CAAgB,KAAnC;AACD;AACF;;AAED,EAAA,QAAQ,CAAC,OAAT,CAAiB,MAAM,IAAI,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,MAAM,CAAC,EAA1B,EAA8B,MAA9B,CAA3B;AAEA,SAAO,KAAP;AACD,CAlDD","sourceRoot":"","sourcesContent":["import byParents from '../children/byParents';\nimport getSpouses from '../utils/getSpouses';\nimport fixOverlaps from './fixOverlaps';\nimport { prop, withType, flat, hasDiffParents } from '../utils';\nexport default (store) => {\n    let families = [];\n    const createFamily = byParents(store);\n    if (hasDiffParents(store.rootNode)) {\n        const bloodParentIDs = store.rootNode.parents\n            .filter(withType('blood'))\n            .map(prop('id'));\n        const adoptedParentIDs = store.rootNode.parents\n            .filter(withType('adopted'))\n            .map(prop('id'));\n        const bloodFamily = createFamily(bloodParentIDs, 'root', true);\n        const adoptedFamily = createFamily(adoptedParentIDs);\n        fixOverlaps(bloodFamily, adoptedFamily);\n        families = [bloodFamily, adoptedFamily];\n    }\n    else {\n        const parentIDs = store.rootNode.parents.map(prop('id'));\n        const mainFamily = createFamily(parentIDs, 'root', true);\n        families.push(mainFamily);\n        const parents = mainFamily.pUnits\n            .map(prop('nodes'))\n            .reduce(flat);\n        if (parents.length === 2) {\n            const { left, right } = getSpouses(store, parents);\n            families = [\n                ...left.map(node => createFamily([node.id])),\n                ...families,\n                ...right.map(node => createFamily([node.id])),\n            ];\n        }\n    }\n    if (families.length > 1) {\n        for (let i = 1; i < families.length; i++) {\n            families[i].left = families[i - 1].right;\n        }\n    }\n    families.forEach(family => store.families.set(family.id, family));\n    return store;\n};\n//# sourceMappingURL=create.js.map"]},"metadata":{},"sourceType":"module"}