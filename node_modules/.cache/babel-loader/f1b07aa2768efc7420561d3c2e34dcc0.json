{"ast":null,"code":"import { relToNode } from '../utils';\n\nconst createRel = (id, type = 'blood') => ({\n  id,\n  type\n});\n\nconst createNode = gender => ({\n  id: `${gender}-placeholder`,\n  placeholder: true,\n  gender: gender,\n  parents: [],\n  siblings: [],\n  spouses: [],\n  children: []\n});\n\nconst createParents = (store, root) => {\n  const father = createNode('male');\n  const mother = createNode('female');\n  father.spouses = [createRel(mother.id, 'married')];\n  mother.spouses = [createRel(father.id, 'married')];\n  return [father, mother].map(node => {\n    node.children = root.siblings.concat(createRel(root.id));\n    store.nodes.set(node.id, node);\n    return createRel(node.id);\n  });\n};\n\nconst setParents = parents => node => node.parents = parents.slice();\n\nexport default (store => {\n  if (store.rootNode.parents.length) return store;\n  const root = store.rootNode;\n  const setParentsTo = setParents(createParents(store, root));\n  setParentsTo(root);\n  root.siblings.map(relToNode(store)).forEach(setParentsTo);\n  return store;\n});","map":{"version":3,"sources":["../../src/middle/placeholders.ts"],"names":[],"mappings":"AAEA,SAAS,SAAT,QAA0B,UAA1B;;AAEA,MAAM,SAAS,GAAG,CAAC,EAAD,EAAa,IAAA,GAAqB,OAAlC,MAA0D;AAAE,EAAA,EAAF;AAAM,EAAA;AAAN,CAA1D,CAAlB;;AAEA,MAAM,UAAU,GAAI,MAAD,KAAkC;AACnD,EAAA,EAAE,EAAE,GAAG,MAAM,cADsC;AAEnD,EAAA,WAAW,EAAE,IAFsC;AAGnD,EAAA,MAAM,EAAE,MAH2C;AAInD,EAAA,OAAO,EAAE,EAJ0C;AAKnD,EAAA,QAAQ,EAAE,EALyC;AAMnD,EAAA,OAAO,EAAE,EAN0C;AAOnD,EAAA,QAAQ,EAAE;AAPyC,CAAlC,CAAnB;;AAUA,MAAM,aAAa,GAAG,CAAC,KAAD,EAAe,IAAf,KAAiD;AACrE,QAAM,MAAM,GAAG,UAAU,CAAC,MAAD,CAAzB;AACA,QAAM,MAAM,GAAG,UAAU,CAAC,QAAD,CAAzB;AAEA,EAAA,MAAM,CAAC,OAAP,GAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,EAAR,EAAY,SAAZ,CAAV,CAAjB;AACA,EAAA,MAAM,CAAC,OAAP,GAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,EAAR,EAAY,SAAZ,CAAV,CAAjB;AAEA,SAAO,CAAC,MAAD,EAAS,MAAT,EAAiB,GAAjB,CAAqB,IAAI,IAAG;AACjC,IAAA,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAAL,CAAc,MAAd,CAAqB,SAAS,CAAC,IAAI,CAAC,EAAN,CAA9B,CAAhB;AACA,IAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,IAAI,CAAC,EAArB,EAAyB,IAAzB;AAEA,WAAO,SAAS,CAAC,IAAI,CAAC,EAAN,CAAhB;AACD,GALM,CAAP;AAMD,CAbD;;AAeA,MAAM,UAAU,GAAI,OAAD,IAA2B,IAAD,IAAuB,IAAI,CAAC,OAAL,GAAe,OAAO,CAAC,KAAR,EAAnF;;AAEA,gBAAgB,KAAD,IAAwB;AACrC,MAAI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,MAA3B,EAAmC,OAAO,KAAP;AACnC,QAAM,IAAI,GAAG,KAAK,CAAC,QAAnB;AACA,QAAM,YAAY,GAAG,UAAU,CAAC,aAAa,CAAC,KAAD,EAAQ,IAAR,CAAd,CAA/B;AAEA,EAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,EAAA,IAAI,CAAC,QAAL,CACG,GADH,CACO,SAAS,CAAC,KAAD,CADhB,EAEG,OAFH,CAEW,YAFX;AAIA,SAAO,KAAP;AACD,CAZD","sourceRoot":"","sourcesContent":["import { relToNode } from '../utils';\nconst createRel = (id, type = 'blood') => ({ id, type });\nconst createNode = (gender) => ({\n    id: `${gender}-placeholder`,\n    placeholder: true,\n    gender: gender,\n    parents: [],\n    siblings: [],\n    spouses: [],\n    children: [],\n});\nconst createParents = (store, root) => {\n    const father = createNode('male');\n    const mother = createNode('female');\n    father.spouses = [createRel(mother.id, 'married')];\n    mother.spouses = [createRel(father.id, 'married')];\n    return [father, mother].map(node => {\n        node.children = root.siblings.concat(createRel(root.id));\n        store.nodes.set(node.id, node);\n        return createRel(node.id);\n    });\n};\nconst setParents = (parents) => (node) => node.parents = parents.slice();\nexport default (store) => {\n    if (store.rootNode.parents.length)\n        return store;\n    const root = store.rootNode;\n    const setParentsTo = setParents(createParents(store, root));\n    setParentsTo(root);\n    root.siblings\n        .map(relToNode(store))\n        .forEach(setParentsTo);\n    return store;\n};\n//# sourceMappingURL=placeholders.js.map"]},"metadata":{},"sourceType":"module"}